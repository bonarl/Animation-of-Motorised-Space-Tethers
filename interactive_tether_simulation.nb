(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    344863,       6564]
NotebookOptionsPosition[    343500,       6533]
NotebookOutlinePosition[    343927,       6550]
CellTagsIndexPosition[    343884,       6547]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["Tether Simulation", "Section",
 ShowGroupOpener->True,
 GroupOpenerInsideFrame->True,
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.7398672461866455`*^9, 3.739867291698142*^9}, {
  3.739867331864425*^9, 3.7398673476580186`*^9}, {3.7398678055187187`*^9, 
  3.7398678251835933`*^9}, {3.739867982328643*^9, 
  3.7398679847066402`*^9}},ExpressionUUID->"addc754c-88b9-467f-b7f8-\
90b2907f126e"],

Cell[CellGroupData[{

Cell["\<\
Evaluate the entire notebook to generate the interactive simulation. To view \
the code expand this cell with the drop-down button to the left of this text. \
\>", "Text",
 ShowGroupOpener->True,
 WholeCellGroupOpener->False,
 GroupOpenerInsideFrame->False,
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.7398683697755556`*^9, 
  3.739868461672985*^9}},ExpressionUUID->"8495a2f7-c804-46b2-910a-\
0e07e5a205f8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"initialisation", " ", "code"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"clicked", " ", "=", " ", "False"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"defaultf", "=", 
     RowBox[{"Directory", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"Manipulate", " ", "function"}], ",", " ", 
     RowBox[{
     "generates", " ", "the", " ", "overall", " ", "interactive", " ", 
      "simulation"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"image", "=", 
       GraphicsBox[
        TagBox[RasterBox[CompressedData["
1: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
+yrYahlwREt3TZdNlW7osg3RaEyxtyyh2RdTb1u7GOqmcu/PHfkvv3+r6wXJ
igMNdunENr2XhXvrw2Iat+q+yq+MQiBl0ztm/8z6uiSBLESEP9nio5EBFsMo
/t0hRVD6zE2vP9+D1nJSfYJYjO/Wc0r1ixEsyxchORxVX/fxk+lna4UI+6Jb
Sav++fey3rjWHofqPLvX0Avv378BUpeL4mOCY4ZN3b1lMVkTOvdiyLaWfYW4
vtt9rYuv4hNBdHjdI2OH1lkEcf16J4lemNw7Z6aol8TQeOJMT92kGE3t8mSp
Gkwhi+nZ1w0vFSeIarVtR9UpkQKXaAwV6gI1a9oaoxtP00R/17pNqnWlyEVb
wDrUdORn3FsTE8XQuSd6wS1a9rDTPP/M+9nSjTI2Vlzq5WDGsNpWRi32+X1g
wq/PT6E9xNW1YFhXozfKb7p276NjsyyPVjhd8GlAqqvRi8u2MFqrM9Sny8Mq
GVSkbrvu6AZTawt7YTSG6ikYdcw9YoIYunvoG4T0sknaydaRte1rmz0+uoTs
0ln8om1pCXHJGQnax59WJLucZmTfu1tseQHKLLeKuaviOFHqLijwX8yovmpW
pUlnIlCFXYN0g6m1hb0gCKNFIvhOukdsNIzuvkWLwMzRwbPCDPm8ttmz+F+/
f/x2MvtrnHdprvmTH62SUzyDun9L2SyeQ8SuZfdWf6srE0WcPkp3yilvTsSI
OhkVePOVObrIqJrtrk/r+WxxLSGtksqZdM+k4CTIImmRiwPwqs0Se+fEQTaX
79oPpCv2r+JZQWt9xxxxqF7m4bKyX88qKgJSJe8fVb131T7lTsTZ1J5QO6pT
ftwIeAWwavyoaklZCzXLiXZrWRVyk7WqXUKJXa/ZXUzMBFOci+Njzim88zDa
gEMiITtLVNcJmVd8CNb3ShDnuEa8L07G5zHES9WXCyKmIoEm85UdKCkKs1bE
BPQ+ZOU2fTXqKBG1qMA6bgLjFHOrApnF2ZWjgnWq19ApoJWwHS/xmUollVvD
aCOT8RS//CVq9oza6yLlCrpgslcJJkj5cnWaslazETLVHdOy9btJn4eMcNLX
joZLUTTKUlZNkK48uxs6XxDtbi7c5ego57Ryt4uUzSzz+fl6a49dMinLcogn
h9QsM18RaNkug+5bU4zDFgFf439YvGGzLVbhbH90HJfsxCeuUXI7WM3etbmg
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
/w/j1EbB
          "], {{0, 461}, {922, 0}}, {0, 255},
          ColorFunction->RGBColor],
         BoxForm`ImageTag[
         "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, 
          Interleaving -> False, MetaInformation -> 
          Association[
           "Exif" -> Association[
             "XResolution" -> 72, "YResolution" -> 72, "ResolutionUnit" -> 
              "inch", "Software" -> "GIMP 2.8.22", "DateTime" -> 
              DateObject[{2018, 5, 12, 18, 18, 19.}, "Instant", "Gregorian", 
                1.], "ExifVersion" -> "2.10", "FlashpixVersion" -> "1.00", 
              "ColorSpace" -> "Uncalibrated", "PixelXDimension" -> 922, 
              "PixelYDimension" -> 461]]],
         Selectable->False],
        DefaultBaseStyle->"ImageGraphics",
        ImageSizeRaw->{922, 461},
        PlotRange->{{0, 922}, {0, 461}}]}], ";", "\n", 
      RowBox[{"earth", "=", 
       RowBox[{"{", 
        RowBox[{"Translate", "[", 
         RowBox[{
          RowBox[{"First", "@", 
           RowBox[{"SphericalPlot3D", "[", 
            RowBox[{"6371000", ",", 
             RowBox[{"{", 
              RowBox[{"theta", ",", "0", ",", "Pi"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"phi", ",", "0", ",", 
               RowBox[{"2", " ", "Pi"}]}], "}"}], ",", 
             RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
             RowBox[{"TextureCoordinateFunction", "\[Rule]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"#5", ",", 
                  RowBox[{"1", "-", "#4"}]}], "}"}], "&"}], ")"}]}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"Directive", "[", 
               RowBox[{"Texture", "[", 
                RowBox[{"ImageData", "@", "image"}], "]"}], "]"}]}], ",", 
             RowBox[{"Lighting", "\[Rule]", "\"\<Neutral\>\""}], ",", 
             RowBox[{"Axes", "\[Rule]", "False"}], ",", 
             RowBox[{"Boxed", "\[Rule]", "False"}]}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "]"}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"clicked", "\[Equal]", "False"}], ",", 
        RowBox[{
        "output", "=", 
         "\"\<Set data and select view, then click 'Update' to view animation\
\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Dynamic", "[", 
       RowBox[{"output", ",", " ", 
        RowBox[{"TrackedSymbols", " ", "\[RuleDelayed]", 
         RowBox[{"{", "output", "}"}]}]}], "]"}]}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "adds", " ", "update", " ", "button", " ", "to", " ", "manipulate"}], 
       ",", " ", 
       RowBox[{
       "when", " ", "clicked", " ", "this", " ", "solves", " ", "the", " ", 
        "system", " ", "of", " ", "equations", " ", "and", " ", "generates", 
        " ", "the", " ", "3", "d", " ", "views"}], ",", " ", 
       RowBox[{
       "majority", " ", "of", " ", "the", " ", "code", " ", "is", " ", 
        "within", " ", "this", " ", "section"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"Button", "[", 
      RowBox[{"\"\<Update\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{"(*", "Data", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"clicked", " ", "=", " ", "True"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"clicked", "\[Equal]", "False"}], ",", 
          RowBox[{
          "output", "=", 
           "\"\<Set data and select view, then click 'Update' to view \
animation\>\""}], ",", 
          RowBox[{"output", "=", "\"\<Updating...\>\""}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"FinishDynamic", "[", "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "initial", " ", "conditions", " ", "and", " ", "variable", " ", 
          "declaration"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"psiQ", " ", "=", 
         RowBox[{"\[Tau]", " ", 
          RowBox[{"Cos", "[", 
           RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}], " ", 
          RowBox[{"Cos", "[", 
           RowBox[{"\[Gamma]", "[", "t", "]"}], "]"}]}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"alphaQ", " ", "=", 
         RowBox[{"\[Tau]", " ", 
          RowBox[{"Sin", "[", 
           RowBox[{"\[Gamma]", "[", "t", "]"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"period", " ", "=", " ", 
         RowBox[{"2", " ", "\[Pi]", " ", 
          RowBox[{"\[Sqrt]", 
           RowBox[{"(", 
            FractionBox[
             SuperscriptBox["a", "3"], "\[Mu]"], ")"}]}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"time", " ", ">", " ", "ranget"}], ",", 
          RowBox[{"ranget", "=", " ", "time"}]}], "]"}], ";", "\n", "  ", 
        RowBox[{"alphadsh0", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
        RowBox[{"psidsh0", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
        RowBox[{"r0", " ", "=", " ", 
         RowBox[{"a", " ", 
          RowBox[{"(", 
           RowBox[{"1", "-", "e"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"rdsh0", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
        RowBox[{"theta0", " ", "=", " ", "0"}], ";", "\[IndentingNewLine]", 
        RowBox[{"thetadsh0", "=", 
         RowBox[{
          FractionBox["1", "r0"], "*", 
          RowBox[{"\[Sqrt]", 
           RowBox[{"(", 
            FractionBox[
             RowBox[{"\[Mu]", " ", 
              RowBox[{"(", 
               RowBox[{"1", "+", "e"}], ")"}]}], 
             RowBox[{"a", " ", 
              RowBox[{"(", 
               RowBox[{"1", "-", "e"}], ")"}]}]], ")"}]}]}]}], "  ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "Position", " ", "vectors", " ", "and", " ", "linear", " ", 
          "kinetic", " ", "energy", " ", 
          RowBox[{"(", 
           RowBox[{
           "translation", " ", "of", " ", "centre", " ", "of", " ", "mass"}], 
           ")"}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"rm", "[", "t", "]"}], " ", "=", " ", 
         RowBox[{"(", GridBox[{
            {
             RowBox[{
              RowBox[{"rc", "[", "t", "]"}], " ", 
              RowBox[{"Cos", "[", 
               RowBox[{"\[Theta]", "[", "t", "]"}], "]"}]}]},
            {
             RowBox[{
              RowBox[{"rc", "[", "t", "]"}], " ", 
              RowBox[{"Sin", "[", 
               RowBox[{"\[Theta]", "[", "t", "]"}], "]"}]}]},
            {"0"}
           }], ")"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"rp1", "[", "t", "]"}], "=", 
         RowBox[{
          RowBox[{"rm", "[", "t", "]"}], "+", 
          RowBox[{"(", GridBox[{
             {
              RowBox[{"l", " ", 
               RowBox[{"Cos", "[", 
                RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}], " ", 
               RowBox[{"Cos", "[", 
                RowBox[{
                 RowBox[{"\[Psi]", "[", "t", "]"}], "+", 
                 RowBox[{"\[Theta]", "[", "t", "]"}]}], "]"}]}]},
             {
              RowBox[{"l", " ", 
               RowBox[{"Cos", "[", 
                RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}], " ", 
               RowBox[{"Sin", "[", 
                RowBox[{
                 RowBox[{"\[Psi]", "[", "t", "]"}], "+", 
                 RowBox[{"\[Theta]", "[", "t", "]"}]}], "]"}]}]},
             {
              RowBox[{"l", " ", 
               RowBox[{"Sin", "[", 
                RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}]}]}
            }], ")"}]}]}], ";", "\n", 
        RowBox[{
         RowBox[{"rp2", "[", "t", "]"}], "=", 
         RowBox[{
          RowBox[{"rm", "[", "t", "]"}], "-", 
          RowBox[{"(", GridBox[{
             {
              RowBox[{"l", " ", 
               RowBox[{"Cos", "[", 
                RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}], " ", 
               RowBox[{"Cos", "[", 
                RowBox[{
                 RowBox[{"\[Psi]", "[", "t", "]"}], "+", 
                 RowBox[{"\[Theta]", "[", "t", "]"}]}], "]"}]}]},
             {
              RowBox[{"l", " ", 
               RowBox[{"Cos", "[", 
                RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}], " ", 
               RowBox[{"Sin", "[", 
                RowBox[{
                 RowBox[{"\[Psi]", "[", "t", "]"}], "+", 
                 RowBox[{"\[Theta]", "[", "t", "]"}]}], "]"}]}]},
             {
              RowBox[{"l", " ", 
               RowBox[{"Sin", "[", 
                RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}]}]}
            }], ")"}]}]}], ";", "\n", "\[IndentingNewLine]", 
        RowBox[{
         SubscriptBox["T", "lin"], "=", 
         RowBox[{
          FractionBox["1", "2"], " ", 
          RowBox[{"(", 
           RowBox[{"2", "*", "Mp"}], ")"}], " ", 
          RowBox[{"(", 
           RowBox[{
            SuperscriptBox[
             RowBox[{
              SuperscriptBox["rc", "\[Prime]"], "[", "t", "]"}], "2"], "+", 
            RowBox[{
             SuperscriptBox[
              RowBox[{"rc", "[", "t", "]"}], "2"], 
             SuperscriptBox[
              RowBox[{
               SuperscriptBox["\[Theta]", "\[Prime]"], "[", "t", "]"}], 
              "2"]}]}], ")"}]}]}], ";", "\[IndentingNewLine]", "\n", 
        RowBox[{"(*", 
         RowBox[{"Rotational", " ", "kinetic", " ", "energy", " ", 
          RowBox[{"(", 
           RowBox[{
           "rotation", " ", "of", " ", "system", " ", "about", " ", "centre", 
            " ", "of", " ", "mass"}], ")"}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\[Omega]", "[", "t", "]"}], "=", 
         RowBox[{"(", GridBox[{
            {
             RowBox[{
              RowBox[{
               SuperscriptBox["\[Gamma]", "\[Prime]",
                MultilineFunction->None], "[", "t", "]"}], "+", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  SuperscriptBox["\[Theta]", "\[Prime]",
                   MultilineFunction->None], "[", "t", "]"}], "+", 
                 RowBox[{
                  SuperscriptBox["\[Psi]", "\[Prime]",
                   MultilineFunction->None], "[", "t", "]"}]}], ")"}], 
               RowBox[{"Sin", "[", 
                RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}]}]}]},
            {
             RowBox[{
              RowBox[{
               RowBox[{"-", 
                RowBox[{"Cos", "[", 
                 RowBox[{"\[Gamma]", "[", "t", "]"}], "]"}]}], " ", 
               RowBox[{
                SuperscriptBox["\[Alpha]", "\[Prime]",
                 MultilineFunction->None], "[", "t", "]"}]}], "+", 
              RowBox[{
               RowBox[{"Cos", "[", 
                RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}], " ", 
               RowBox[{"Sin", "[", 
                RowBox[{"\[Gamma]", "[", "t", "]"}], "]"}], " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  SuperscriptBox["\[Theta]", "\[Prime]",
                   MultilineFunction->None], "[", "t", "]"}], "+", 
                 RowBox[{
                  SuperscriptBox["\[Psi]", "\[Prime]",
                   MultilineFunction->None], "[", "t", "]"}]}], ")"}]}]}]},
            {
             RowBox[{
              RowBox[{
               RowBox[{"Sin", "[", 
                RowBox[{"\[Gamma]", "[", "t", "]"}], "]"}], " ", 
               RowBox[{
                SuperscriptBox["\[Alpha]", "\[Prime]",
                 MultilineFunction->None], "[", "t", "]"}]}], "+", 
              RowBox[{
               RowBox[{"Cos", "[", 
                RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}], " ", 
               RowBox[{"Cos", "[", 
                RowBox[{"\[Gamma]", "[", "t", "]"}], "]"}], " ", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  SuperscriptBox["\[Theta]", "\[Prime]",
                   MultilineFunction->None], "[", "t", "]"}], "+", 
                 RowBox[{
                  SuperscriptBox["\[Psi]", "\[Prime]",
                   MultilineFunction->None], "[", "t", "]"}]}], ")"}]}]}]}
           }], ")"}]}], ";", "\[IndentingNewLine]", "\n", 
        RowBox[{
         SubscriptBox["\[ImaginaryI]", "123"], "=", 
         RowBox[{"(", GridBox[{
            {"0", "0", "0"},
            {"0", 
             RowBox[{"2", " ", "Mp", " ", 
              SuperscriptBox["l", "2"]}], "0"},
            {"0", "0", 
             RowBox[{"2", " ", "Mp", " ", 
              SuperscriptBox["l", "2"]}]}
           }], ")"}]}], ";", "\n", "\[IndentingNewLine]", 
        RowBox[{
         SubscriptBox["T", "rot"], "=", 
         RowBox[{
          FractionBox["1", "2"], " ", 
          RowBox[{
           RowBox[{"Transpose", "[", 
            RowBox[{"\[Omega]", "[", "t", "]"}], "]"}], ".", 
           SubscriptBox["\[ImaginaryI]", "123"], ".", 
           RowBox[{"\[Omega]", "[", "t", "]"}]}]}]}], ";", 
        "\[IndentingNewLine]", "\n", 
        RowBox[{"T", "=", 
         RowBox[{
          SubscriptBox["T", "lin"], "+", 
          SubscriptBox["T", "rot"]}]}], ";", "\[IndentingNewLine]", "\n", 
        RowBox[{"(*", 
         RowBox[{"potential", " ", "energy"}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         SubscriptBox["U", "p1"], "=", 
         RowBox[{"-", 
          FractionBox[
           RowBox[{"\[Mu]", " ", "Mp"}], 
           SqrtBox[
            RowBox[{
             RowBox[{"Transpose", "[", 
              RowBox[{"rp1", "[", "t", "]"}], "]"}], ".", 
             RowBox[{"rp1", "[", "t", "]"}]}]]]}]}], ";", "\n", 
        RowBox[{
         SubscriptBox["U", "p2"], "=", 
         RowBox[{"-", 
          FractionBox[
           RowBox[{"\[Mu]", " ", "Mp"}], 
           SqrtBox[
            RowBox[{
             RowBox[{"Transpose", "[", 
              RowBox[{"rp2", "[", "t", "]"}], "]"}], ".", 
             RowBox[{"rp2", "[", "t", "]"}]}]]]}]}], ";", "\n", 
        RowBox[{"V", "=", 
         RowBox[{
          SubscriptBox["U", "p1"], "+", 
          SubscriptBox["U", "p2"]}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Lagrange", " ", "equations", " ", "and", " ", "NDsolve"}], 
         "*)"}], "\n", 
        RowBox[{"L", "=", 
         RowBox[{"T", "-", "V"}]}], ";", "\n", 
        RowBox[{"eqn1", "=", 
         RowBox[{"Simplify", "[", 
          RowBox[{
           RowBox[{
            SubscriptBox["\[PartialD]", "t"], 
            RowBox[{
             SubscriptBox["\[PartialD]", 
              RowBox[{
               SuperscriptBox["\[Psi]", "\[Prime]",
                MultilineFunction->None], "[", "t", "]"}]], "L"}]}], "-", 
           RowBox[{
            SubscriptBox["\[PartialD]", 
             RowBox[{"\[Psi]", "[", "t", "]"}]], "L"}], "-", "psiQ"}], 
          "]"}]}], ";", "\n", 
        RowBox[{"eqn2", "=", 
         RowBox[{"Simplify", "[", 
          RowBox[{
           RowBox[{
            SubscriptBox["\[PartialD]", "t"], 
            RowBox[{
             SubscriptBox["\[PartialD]", 
              RowBox[{
               SuperscriptBox["\[Alpha]", "\[Prime]",
                MultilineFunction->None], "[", "t", "]"}]], "L"}]}], "-", 
           RowBox[{
            SubscriptBox["\[PartialD]", 
             RowBox[{"\[Alpha]", "[", "t", "]"}]], "L"}], "-", "alphaQ"}], 
          "]"}]}], ";", "\n", 
        RowBox[{"eqn3", " ", "=", " ", 
         RowBox[{"Simplify", "[", 
          RowBox[{
           RowBox[{
            SubscriptBox["\[PartialD]", "t"], 
            RowBox[{
             SubscriptBox["\[PartialD]", 
              RowBox[{
               SuperscriptBox["\[Theta]", "\[Prime]",
                MultilineFunction->None], "[", "t", "]"}]], "L"}]}], "-", 
           RowBox[{
            SubscriptBox["\[PartialD]", 
             RowBox[{"\[Theta]", "[", "t", "]"}]], "L"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"eqn4", " ", "=", " ", 
         RowBox[{"Simplify", "[", 
          RowBox[{
           RowBox[{
            SubscriptBox["\[PartialD]", "t"], 
            RowBox[{
             SubscriptBox["\[PartialD]", 
              RowBox[{
               SuperscriptBox["rc", "\[Prime]",
                MultilineFunction->None], "[", "t", "]"}]], "L"}]}], "-", 
           RowBox[{
            SubscriptBox["\[PartialD]", 
             RowBox[{"rc", "[", "t", "]"}]], "L"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"eqn5", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Cos", "[", 
            RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}], " ", 
           RowBox[{
            SuperscriptBox["\[Alpha]", "\[Prime]",
             MultilineFunction->None], "[", "t", "]"}], " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              SuperscriptBox["\[Theta]", "\[Prime]",
               MultilineFunction->None], "[", "t", "]"}], "+", 
             RowBox[{
              SuperscriptBox["\[Psi]", "\[Prime]",
               MultilineFunction->None], "[", "t", "]"}]}], ")"}]}], "+", 
          RowBox[{
           SuperscriptBox["\[Gamma]", "\[Prime]\[Prime]",
            MultilineFunction->None], "[", "t", "]"}], "+", 
          RowBox[{
           RowBox[{"Sin", "[", 
            RowBox[{"\[Alpha]", "[", "t", "]"}], "]"}], " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              SuperscriptBox["\[Theta]", "\[Prime]\[Prime]",
               MultilineFunction->None], "[", "t", "]"}], "+", 
             RowBox[{
              SuperscriptBox["\[Psi]", "\[Prime]\[Prime]",
               MultilineFunction->None], "[", "t", "]"}]}], ")"}]}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"system", "=", 
         RowBox[{"NDSolve", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"eqn1", "\[Equal]", "0"}], ",", 
             RowBox[{"eqn2", "\[Equal]", "0"}], ",", 
             RowBox[{"eqn3", "\[Equal]", "0"}], ",", 
             RowBox[{"eqn4", "\[Equal]", "0"}], ",", 
             RowBox[{"eqn5", "\[Equal]", "0"}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"\[Alpha]", "[", "0", "]"}], "\[Equal]", "alpha0"}], 
             ",", 
             RowBox[{
              RowBox[{
               SuperscriptBox["\[Alpha]", "\[Prime]",
                MultilineFunction->None], "[", "0", "]"}], "\[Equal]", 
              "alphadsh0"}], ",", 
             RowBox[{
              RowBox[{"\[Psi]", "[", "0", "]"}], "\[Equal]", "psi0"}], ",", 
             RowBox[{
              RowBox[{
               SuperscriptBox["\[Psi]", "\[Prime]",
                MultilineFunction->None], "[", "0", "]"}], "\[Equal]", 
              "psidsh0"}], ",", " ", 
             RowBox[{
              RowBox[{"\[Theta]", "[", "0", "]"}], " ", "\[Equal]", " ", 
              "theta0"}], ",", 
             RowBox[{
              RowBox[{
               SuperscriptBox["\[Theta]", "\[Prime]"], "[", "0", "]"}], 
              "\[Equal]", "thetadsh0"}], ",", 
             RowBox[{
              RowBox[{"rc", "[", "0", "]"}], " ", "==", " ", "r0"}], ",", 
             RowBox[{
              RowBox[{
               SuperscriptBox["rc", "\[Prime]"], "[", "0", "]"}], "==", "0"}],
              ",", 
             RowBox[{
              RowBox[{"\[Gamma]", "[", "0", "]"}], "\[Equal]", "gamma0"}], 
             ",", 
             RowBox[{
              RowBox[{
               SuperscriptBox["\[Gamma]", "\[Prime]",
                MultilineFunction->None], "[", "0", "]"}], "\[Equal]", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{"(", 
                 RowBox[{"thetadsh0", "+", "psidsh0"}], ")"}]}], 
               RowBox[{"Sin", "[", "alpha0", "]"}]}]}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
            "\[Psi]", ",", "\[Alpha]", ",", "\[Theta]", ",", "rc", ",", 
             "\[Gamma]"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", "0", ",", "ranget"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"MaxSteps", "\[Rule]", "\[Infinity]"}], ",", 
           RowBox[{"AccuracyGoal", "\[Rule]", "Automatic"}], ",", 
           RowBox[{"PrecisionGoal", "\[Rule]", "10"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "get", " ", "results", " ", "for", " ", "each", " ", "degree", " ", 
          "of", " ", "freedom", " ", "using", " ", "these", " ", 
          "functions"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"gammas", "[", "t_", "]"}], ":=", 
         RowBox[{"Evaluate", "[", 
          RowBox[{
           RowBox[{"\[Gamma]", "[", "t", "]"}], "/.", 
           RowBox[{"system", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"psis", "[", "t_", "]"}], ":=", 
         RowBox[{
          RowBox[{"\[Psi]", "[", "t", "]"}], "/.", 
          RowBox[{"system", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"alphas", "[", "t_", "]"}], ":=", 
         RowBox[{
          RowBox[{"\[Alpha]", "[", "t", "]"}], "/.", 
          RowBox[{"system", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"thetas", "[", "t_", "]"}], ":=", 
         RowBox[{
          RowBox[{"\[Theta]", "[", "t", "]"}], "/.", 
          RowBox[{"system", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"rs", "[", "t_", "]"}], ":=", 
         RowBox[{
          RowBox[{"rc", "[", "t", "]"}], "/.", 
          RowBox[{"system", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"radius", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Evaluate", "[", 
            RowBox[{"rs", "[", "t", "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"t", ",", "0", ",", "ranget", ",", 
             RowBox[{"ranget", "/", "100000"}]}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "top", " ", "down", " ", "scale", " ", "orbit", " ", "animation"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"rcc", "[", "t_", "]"}], " ", ":=", 
         RowBox[{"rs", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"RC1", "[", "t_", "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"rcc", "[", "t", "]"}], "*", 
            RowBox[{"Cos", "[", 
             RowBox[{"thetas", "[", "t", "]"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{"rcc", "[", "t", "]"}], "*", 
            RowBox[{"Sin", "[", 
             RowBox[{"thetas", "[", "t", "]"}], "]"}]}], ",", "0"}], "}"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"trace1", "[", "t_", "]"}], ":=", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", 
           RowBox[{"Line", "[", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"RC1", "[", "i", "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"t", "+", 
                    RowBox[{"period", "/", "4"}]}], ">", "period"}], ",", 
                  RowBox[{"Round", "[", 
                   RowBox[{"t", "-", "period", "+", 
                    RowBox[{"period", "/", "4"}]}], "]"}], ",", "1"}], "]"}], 
                ",", "t", ",", "100"}], "}"}]}], "]"}], "]"}]}], "}"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"point1", "[", "t_", "]"}], ":=", 
         RowBox[{"{", 
          RowBox[{"Red", ",", " ", 
           RowBox[{"Point", "[", 
            RowBox[{"RC1", "[", "t", "]"}], "]"}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"simplified", " ", "animation"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"rfactor", " ", "=", 
         RowBox[{"35", "/", 
          RowBox[{"Min", "[", "radius", "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"earth1", " ", "=", " ", 
         RowBox[{"{", 
          RowBox[{"White", ",", " ", 
           RowBox[{"Sphere", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", "10"}], "]"}]}], 
          "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"rp", " ", "=", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"10", "/", "50000"}], "*", "l"}], "<", "30"}], ",", 
           RowBox[{
            RowBox[{"10", "/", "50000"}], "*", "l"}], ",", "30"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"rcc1", "[", "t_", "]"}], " ", ":=", 
         RowBox[{"rfactor", "*", 
          RowBox[{"rs", "[", "t", "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"RC", "[", "t_", "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"rcc1", "[", "t", "]"}], "*", 
            RowBox[{"Cos", "[", 
             RowBox[{"thetas", "[", "t", "]"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{"rcc1", "[", "t", "]"}], "*", 
            RowBox[{"Sin", "[", 
             RowBox[{"thetas", "[", "t", "]"}], "]"}]}], ",", "0"}], "}"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"trace", "[", "t_", "]"}], ":=", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", 
           RowBox[{"Line", "[", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"RC", "[", "i", "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"t", "+", 
                    RowBox[{"period", "/", "4"}]}], ">", "period"}], ",", 
                  RowBox[{"Round", "[", 
                   RowBox[{"t", "-", "period", "+", 
                    RowBox[{"period", "/", "4"}]}], "]"}], ",", "1"}], "]"}], 
                ",", "t", ",", "100"}], "}"}]}], "]"}], "]"}]}], "}"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"point", "[", "t_", "]"}], ":=", 
         RowBox[{"{", 
          RowBox[{"Red", ",", " ", 
           RowBox[{"Point", "[", 
            RowBox[{"RC", "[", "t", "]"}], "]"}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"RP1", "[", "t_", "]"}], ":=", " ", 
         RowBox[{
          RowBox[{"RC", "[", "t", "]"}], "+", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"rp", "*", 
             RowBox[{"Cos", "[", 
              RowBox[{"alphas", "[", "t", "]"}], "]"}], "*", 
             RowBox[{"Cos", "[", 
              RowBox[{
               RowBox[{"psis", "[", "t", "]"}], "+", 
               RowBox[{"thetas", "[", "t", "]"}]}], "]"}]}], ",", 
            RowBox[{"rp", "*", 
             RowBox[{"Cos", "[", 
              RowBox[{"alphas", "[", "t", "]"}], "]"}], 
             RowBox[{"Sin", "[", 
              RowBox[{
               RowBox[{"psis", "[", "t", "]"}], "+", 
               RowBox[{"thetas", "[", "t", "]"}]}], "]"}]}], ",", 
            RowBox[{"rp", "*", 
             RowBox[{"Sin", "[", 
              RowBox[{"alphas", "[", "t", "]"}], "]"}]}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"RP2", "[", "t_", "]"}], ":=", " ", 
         RowBox[{
          RowBox[{"RC", "[", "t", "]"}], "-", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"rp", "*", 
             RowBox[{"Cos", "[", 
              RowBox[{"alphas", "[", "t", "]"}], "]"}], "*", 
             RowBox[{"Cos", "[", 
              RowBox[{
               RowBox[{"psis", "[", "t", "]"}], "+", 
               RowBox[{"thetas", "[", "t", "]"}]}], "]"}]}], ",", 
            RowBox[{"rp", "*", 
             RowBox[{"Cos", "[", 
              RowBox[{"alphas", "[", "t", "]"}], "]"}], 
             RowBox[{"Sin", "[", 
              RowBox[{
               RowBox[{"psis", "[", "t", "]"}], "+", 
               RowBox[{"thetas", "[", "t", "]"}]}], "]"}]}], ",", 
            RowBox[{"rp", "*", 
             RowBox[{"Sin", "[", 
              RowBox[{"alphas", "[", "t", "]"}], "]"}]}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"P1", "[", "t_", "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Gray", ",", " ", 
           RowBox[{"Sphere", "[", 
            RowBox[{
             RowBox[{"RP1", "[", "t", "]"}], ",", "1"}], "]"}]}], "}"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"P2", "[", "t_", "]"}], " ", ":=", 
         RowBox[{"{", 
          RowBox[{"Gray", ",", " ", 
           RowBox[{"Sphere", "[", 
            RowBox[{
             RowBox[{"RP2", "[", "t", "]"}], ",", "1"}], "]"}]}], "}"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tether1", "[", "t_", "]"}], ":=", 
         RowBox[{"{", 
          RowBox[{"Black", ",", " ", 
           RowBox[{"Cylinder", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"RC", "[", "t", "]"}], ",", 
               RowBox[{"RP2", "[", "t", "]"}]}], "}"}], ",", "0.3"}], "]"}]}],
           "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tether2", "[", "t_", "]"}], ":=", 
         RowBox[{"{", 
          RowBox[{"White", ",", " ", 
           RowBox[{"Cylinder", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"RC", "[", "t", "]"}], ",", 
               RowBox[{"RP1", "[", "t", "]"}]}], "}"}], ",", "0.3"}], "]"}]}],
           "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"xaxis", "[", "t_", "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Red", ",", " ", 
           RowBox[{"Cylinder", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"RC", "[", "t", "]"}], ",", 
               RowBox[{
                RowBox[{"RC", "[", "t", "]"}], "+", 
                RowBox[{"15", " ", "*", " ", 
                 RowBox[{"Normalize", "[", 
                  RowBox[{"RC", "[", "t", "]"}], "]"}]}]}]}], "}"}], ",", 
             "0.1"}], "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"yaxis", "[", "t_", "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Green", ",", " ", 
           RowBox[{"Cylinder", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"RC", "[", "t", "]"}], ",", 
               RowBox[{
                RowBox[{"RC", "[", "t", "]"}], "+", 
                RowBox[{"15", " ", 
                 RowBox[{"Normalize", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"RC", "[", "t", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"RC", "[", "t", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", "0"}], "}"}], 
                  "]"}]}]}]}], "}"}], ",", "0.1"}], "]"}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"zaxis", "[", "t_", "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", " ", 
           RowBox[{"Cylinder", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"RC", "[", "t", "]"}], ",", 
               RowBox[{
                RowBox[{"RC", "[", "t", "]"}], "+", 
                RowBox[{"15", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0", ",", "1"}], "}"}]}]}]}], "}"}], ",", 
             "0.1"}], "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"body", " ", "frame", " ", "animation"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"RP11", "[", "t_", "]"}], ":=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"rp", "*", 
            RowBox[{"Cos", "[", 
             RowBox[{"alphas", "[", "t", "]"}], "]"}], "*", 
            RowBox[{"Cos", "[", 
             RowBox[{"psis", "[", "t", "]"}], "]"}]}], ",", 
           RowBox[{"rp", "*", 
            RowBox[{"Cos", "[", 
             RowBox[{"alphas", "[", "t", "]"}], "]"}], 
            RowBox[{"Sin", "[", 
             RowBox[{"psis", "[", "t", "]"}], "]"}]}], ",", 
           RowBox[{"rp", "*", 
            RowBox[{"Sin", "[", 
             RowBox[{"alphas", "[", "t", "]"}], "]"}]}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"RP21", "[", "t_", "]"}], ":=", " ", 
         RowBox[{"-", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"rp", "*", 
             RowBox[{"Cos", "[", 
              RowBox[{"alphas", "[", "t", "]"}], "]"}], "*", 
             RowBox[{"Cos", "[", 
              RowBox[{"psis", "[", "t", "]"}], "]"}]}], ",", 
            RowBox[{"rp", "*", 
             RowBox[{"Cos", "[", 
              RowBox[{"alphas", "[", "t", "]"}], "]"}], 
             RowBox[{"Sin", "[", 
              RowBox[{"psis", "[", "t", "]"}], "]"}]}], ",", 
            RowBox[{"rp", "*", 
             RowBox[{"Sin", "[", 
              RowBox[{"alphas", "[", "t", "]"}], "]"}]}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"P11", "[", "t_", "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Gray", ",", " ", 
           RowBox[{"Sphere", "[", 
            RowBox[{
             RowBox[{"RP11", "[", "t", "]"}], ",", "1"}], "]"}]}], "}"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"P21", "[", "t_", "]"}], " ", ":=", 
         RowBox[{"{", 
          RowBox[{"Gray", ",", " ", 
           RowBox[{"Sphere", "[", 
            RowBox[{
             RowBox[{"RP21", "[", "t", "]"}], ",", "1"}], "]"}]}], "}"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tether11", "[", "t_", "]"}], ":=", 
         RowBox[{"{", 
          RowBox[{"Black", ",", " ", 
           RowBox[{"Cylinder", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
               RowBox[{"RP21", "[", "t", "]"}]}], "}"}], ",", "0.3"}], 
            "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tether21", "[", "t_", "]"}], ":=", 
         RowBox[{"{", 
          RowBox[{"White", ",", " ", 
           RowBox[{"Cylinder", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
               RowBox[{"RP11", "[", "t", "]"}]}], "}"}], ",", "0.3"}], 
            "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"xaxis2", " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Red", ",", " ", "Thick", ",", " ", 
           RowBox[{"InfiniteLine", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "12"}], ",", "0", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"12", ",", "0", ",", "0"}], "}"}]}], "}"}], "]"}]}], 
          "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"yaxis2", " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Black", ",", "Thick", ",", " ", 
           RowBox[{"InfiniteLine", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", 
                RowBox[{"-", "12"}], ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "12", ",", "0"}], "}"}]}], "}"}], "]"}]}], 
          "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"zaxis2", " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Black", ",", " ", "Thick", ",", 
           RowBox[{"InfiniteLine", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "0", ",", 
                RowBox[{"-", "12"}]}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "0", ",", "12"}], "}"}]}], "}"}], "]"}]}], 
          "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"tracerange", " ", "=", " ", "500"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tracep1", "[", "t_", "]"}], ":=", 
         RowBox[{"{", 
          RowBox[{"Red", ",", " ", 
           RowBox[{"Line", "[", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"RP11", "[", "x", "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"x", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"t", "-", "tracerange"}], ">", "0"}], ",", 
                  RowBox[{"t", "-", "tracerange"}], ",", "1"}], "]"}], ",", 
                "t", ",", "10"}], "}"}]}], "]"}], "]"}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tracep2", "[", "t_", "]"}], ":=", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", " ", 
           RowBox[{"Line", "[", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"RP21", "[", "x", "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"x", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"t", "-", "tracerange"}], ">", "0"}], ",", 
                  RowBox[{"t", "-", "tracerange"}], ",", "1"}], "]"}], ",", 
                "t", ",", "10"}], "}"}]}], "]"}], "]"}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          SubscriptBox["e", "1"], "[", "t_", "]"}], ":=", 
         RowBox[{"RP11", "[", "t", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          SubscriptBox["e", "2"], "[", "t_", "]"}], ":=", 
         RowBox[{
          RowBox[{"RotationTransform", "[", 
           RowBox[{
            RowBox[{"gammas", "[", "t", "]"}], ",", 
            RowBox[{
             SubscriptBox["e", "1"], "[", "t", "]"}]}], "]"}], "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", 
             RowBox[{"Sin", "[", 
              RowBox[{"psis", "[", "t", "]"}], "]"}]}], ",", 
            RowBox[{"Cos", "[", 
             RowBox[{"psis", "[", "t", "]"}], "]"}], ",", "0"}], "}"}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          SubscriptBox["e", "3"], "[", "t_", "]"}], ":=", " ", 
         RowBox[{"Cross", "[", 
          RowBox[{
           RowBox[{
            SubscriptBox["e", "1"], "[", "t", "]"}], ",", 
           RowBox[{
            SubscriptBox["e", "2"], "[", "t", "]"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"oneax", "[", "t_", "]"}], ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Green", ",", "Thick", ",", " ", 
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
              RowBox[{"20", "*", 
               RowBox[{"Normalize", "[", 
                RowBox[{
                 SubscriptBox["e", "1"], "[", "t", "]"}], "]"}]}]}], "}"}], 
            "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"twoax", "[", "t_", "]"}], ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Green", ",", "Thick", ",", " ", 
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
              RowBox[{"20", "*", 
               RowBox[{"Normalize", "[", 
                RowBox[{
                 SubscriptBox["e", "2"], "[", "t", "]"}], "]"}]}]}], "}"}], 
            "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"threeax", "[", "t_", "]"}], ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Purple", ",", "Thick", ",", " ", 
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
              RowBox[{"20", "*", 
               RowBox[{"Normalize", "[", 
                RowBox[{
                 SubscriptBox["e", "3"], "[", "t", "]"}], "]"}]}]}], "}"}], 
            "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"alphaxy", "[", "t_", "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"rp", "*", 
            RowBox[{"Cos", "[", 
             RowBox[{"alphas", "[", "t", "]"}], "]"}], "*", 
            RowBox[{"Cos", "[", 
             RowBox[{"psis", "[", "t", "]"}], "]"}]}], ",", 
           RowBox[{"rp", "*", 
            RowBox[{"Cos", "[", 
             RowBox[{"alphas", "[", "t", "]"}], "]"}], 
            RowBox[{"Sin", "[", 
             RowBox[{"psis", "[", "t", "]"}], "]"}]}], ",", "0"}], "}"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"up", "[", "t_", "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", " ", "Dashed", ",", 
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"alphaxy", "[", "t", "]"}], ",", 
               RowBox[{"RP11", "[", "t", "]"}]}], "}"}], "}"}], "]"}]}], 
          "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"out", "[", "t_", "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", " ", "Dashed", ",", " ", 
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"alphaxy", "[", "t", "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}], "}"}], 
            "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"flat", " ", "=", " ", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", " ", 
           RowBox[{"Opacity", "[", "0.1", "]"}], ",", 
           RowBox[{"InfinitePlane", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], "}"}], "]"}]}], 
          "}"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"\"\<Cinematic\>\"", " ", "animation"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"tlength", "=", "250000"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"RC3", "[", "t_", "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"rs", "[", "t", "]"}], "*", 
            RowBox[{"Cos", "[", 
             RowBox[{"thetas", "[", "t", "]"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{"rs", "[", "t", "]"}], "*", 
            RowBox[{"Sin", "[", 
             RowBox[{"thetas", "[", "t", "]"}], "]"}]}], ",", "0"}], "}"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"RP13", "[", "t_", "]"}], ":=", " ", 
         RowBox[{
          RowBox[{"RC3", "[", "t", "]"}], "+", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"tlength", "*", 
             RowBox[{"Cos", "[", 
              RowBox[{"alphas", "[", "t", "]"}], "]"}], "*", 
             RowBox[{"Cos", "[", 
              RowBox[{
               RowBox[{"psis", "[", "t", "]"}], "+", 
               RowBox[{"thetas", "[", "t", "]"}]}], "]"}]}], ",", 
            RowBox[{"tlength", "*", 
             RowBox[{"Cos", "[", 
              RowBox[{"alphas", "[", "t", "]"}], "]"}], 
             RowBox[{"Sin", "[", 
              RowBox[{
               RowBox[{"psis", "[", "t", "]"}], "+", 
               RowBox[{"thetas", "[", "t", "]"}]}], "]"}]}], ",", 
            RowBox[{"tlength", "*", 
             RowBox[{"Sin", "[", 
              RowBox[{"alphas", "[", "t", "]"}], "]"}]}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"RP23", "[", "t_", "]"}], ":=", " ", 
         RowBox[{
          RowBox[{"RC3", "[", "t", "]"}], "-", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"tlength", "*", 
             RowBox[{"Cos", "[", 
              RowBox[{"alphas", "[", "t", "]"}], "]"}], "*", 
             RowBox[{"Cos", "[", 
              RowBox[{
               RowBox[{"psis", "[", "t", "]"}], "+", 
               RowBox[{"thetas", "[", "t", "]"}]}], "]"}]}], ",", 
            RowBox[{"tlength", "*", 
             RowBox[{"Cos", "[", 
              RowBox[{"alphas", "[", "t", "]"}], "]"}], 
             RowBox[{"Sin", "[", 
              RowBox[{
               RowBox[{"psis", "[", "t", "]"}], "+", 
               RowBox[{"thetas", "[", "t", "]"}]}], "]"}]}], ",", 
            RowBox[{"tlength", "*", 
             RowBox[{"Sin", "[", 
              RowBox[{"alphas", "[", "t", "]"}], "]"}]}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"P13", "[", "t_", "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Darker", "[", "Gray", "]"}], ",", "  ", 
           RowBox[{"Sphere", "[", 
            RowBox[{
             RowBox[{"RP13", "[", "t", "]"}], ",", "20000"}], "]"}]}], 
          "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"P23", "[", "t_", "]"}], " ", ":=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Darker", "[", "Gray", "]"}], ",", " ", 
           RowBox[{"Sphere", "[", 
            RowBox[{
             RowBox[{"RP23", "[", "t", "]"}], ",", "20000"}], "]"}]}], 
          "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tether13", "[", "t_", "]"}], ":=", 
         RowBox[{"{", 
          RowBox[{"Gray", ",", " ", "Thick", ",", 
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RC3", "[", "t", "]"}], ",", 
              RowBox[{"RP23", "[", "t", "]"}]}], "}"}], "]"}]}], "}"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tether23", "[", "t_", "]"}], ":=", 
         RowBox[{"{", 
          RowBox[{"Gray", ",", " ", "Thick", ",", " ", 
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RC3", "[", "t", "]"}], ",", 
              RowBox[{"RP13", "[", "t", "]"}]}], "}"}], "]"}]}], "}"}]}], ";",
         "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"xaxis3", "[", "t_", "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Red", ",", 
           RowBox[{"Opacity", "[", "0.5", "]"}], ",", "Thick", ",", " ", 
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RC3", "[", "t", "]"}], ",", 
              RowBox[{"1.1", 
               RowBox[{"RC3", "[", "t", "]"}]}]}], "}"}], "]"}]}], "}"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"yaxis3", "[", "t_", "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Green", ",", 
           RowBox[{"Opacity", "[", "0.5", "]"}], ",", " ", "Thick", ",", 
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RC3", "[", "t", "]"}], ",", 
              RowBox[{
               RowBox[{"RC3", "[", "t", "]"}], "+", 
               RowBox[{"0.1", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", 
                   RowBox[{
                    RowBox[{"RC3", "[", "t", "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", 
                  RowBox[{
                   RowBox[{"RC3", "[", "t", "]"}], "[", 
                   RowBox[{"[", "1", "]"}], "]"}], ",", "0"}], "}"}]}]}]}], 
             "}"}], "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"zaxis3", "[", "t_", "]"}], " ", ":=", " ", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", 
           RowBox[{"Opacity", "[", "0.5", "]"}], ",", " ", "Thick", ",", 
           RowBox[{"Line", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"RC3", "[", "t", "]"}], ",", 
              RowBox[{
               RowBox[{"RC3", "[", "t", "]"}], "+", 
               RowBox[{"0.1", 
                RowBox[{"Norm", "[", 
                 RowBox[{"RC3", "[", "t", "]"}], "]"}], 
                RowBox[{"{", 
                 RowBox[{"0", ",", "0", ",", "1"}], "}"}]}]}]}], "}"}], 
            "]"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"tracerange", " ", "=", " ", 
         RowBox[{
          RowBox[{"4", "/", "5"}], " ", "period"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tracep13", "[", "t_", "]"}], ":=", 
         RowBox[{"{", 
          RowBox[{"Red", ",", "Thick", ",", " ", 
           RowBox[{"Line", "[", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"RP13", "[", "x", "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"x", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"t", "-", "tracerange"}], ">", "0"}], ",", 
                  RowBox[{"t", "-", "tracerange"}], ",", "1"}], "]"}], ",", 
                "t", ",", "10"}], "}"}]}], "]"}], "]"}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tracep23", "[", "t_", "]"}], ":=", 
         RowBox[{"{", 
          RowBox[{"Blue", ",", " ", "Thick", ",", 
           RowBox[{"Line", "[", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"RP23", "[", "x", "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"x", ",", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"t", "-", "tracerange"}], ">", "0"}], ",", 
                  RowBox[{"t", "-", "tracerange"}], ",", "1"}], "]"}], ",", 
                "t", ",", "10"}], "}"}]}], "]"}], "]"}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "camera", " ", "point", " ", "is", " ", "time", " ", "dependent", 
           " ", "so", " ", "this", " ", "function", " ", "can", " ", "be", 
           " ", "adjusted"}], ",", " ", 
          RowBox[{
          "viewpoint", " ", "goes", " ", "from", " ", "camerapoint", " ", 
           "to", " ", "centre", " ", "of", " ", "mass"}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"camerapoint", "[", "t_", "]"}], " ", ":=", 
         RowBox[{
          RowBox[{"RC3", "[", "t", "]"}], "+", 
          RowBox[{"0.5", 
           RowBox[{"RC3", "[", "t", "]"}]}], "+", 
          RowBox[{"{", 
           RowBox[{"0", ",", "2000000", ",", "2000000"}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"3", "D", " ", "graphics"}], ",", " ", 
          RowBox[{
          "nested", " ", "\"\<If\>\"", " ", "statements", " ", "are", " ", 
           "dependent", " ", "on", " ", "view", " ", "control", " ", "to", 
           " ", "decide", " ", "which", " ", "is", " ", "shown"}]}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"imagePadding", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"100", ",", "10"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"25", ",", "10"}], "}"}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"graphicsgrid", " ", "=", 
         RowBox[{"Grid", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"switch", "\[Equal]", "\"\<Earth Scale View\>\""}], 
               ",", 
               RowBox[{"Dynamic", "[", 
                RowBox[{"Graphics3D", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"trace1", "[", "time", "]"}], ",", "earth", ",", 
                    RowBox[{"point1", "[", "time", "]"}]}], "}"}], ",", 
                  RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{
                    RowBox[{"Max", "[", "radius", "]"}], "+", 
                    RowBox[{"0.1", "*", 
                    RowBox[{"Max", "[", "radius", "]"}]}]}]}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"600", ",", "600"}], "}"}]}], ",", 
                  RowBox[{"ViewPoint", "\[Rule]", "Above"}], ",", 
                  RowBox[{
                  "ViewProjection", "\[Rule]", "\"\<Orthographic\>\""}], ",", 
                  RowBox[{"Lighting", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Ambient\>\"", ",", " ", "White"}], "}"}], 
                    "}"}]}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"switch", "\[Equal]", "\"\<Simplified View\>\""}], 
                 ",", 
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"Graphics3D", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"trace", "[", "time", "]"}], ",", "earth1", ",", 
                    RowBox[{"P1", "[", "time", "]"}], ",", 
                    RowBox[{"P2", "[", "time", "]"}], ",", 
                    RowBox[{"tether1", "[", "time", "]"}], ",", 
                    RowBox[{"tether2", "[", "time", "]"}], ",", 
                    RowBox[{"xaxis", "[", "time", "]"}], ",", 
                    RowBox[{"yaxis", "[", "time", "]"}], ",", 
                    RowBox[{"zaxis", "[", "time", "]"}]}], "}"}], ",", 
                    RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{"1.1", "*", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"radius", "*", "rfactor"}], "]"}], "+", "rp"}], 
                    ")"}]}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"600", ",", "600"}], "}"}]}], ",", 
                    RowBox[{"ViewPoint", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"1.3", ",", 
                    RowBox[{"-", "2.4"}], ",", "2"}], "}"}]}]}], "]"}], "]"}],
                  ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"switch", "\[Equal]", "\"\<Body Frame\>\""}], ",", 
                   RowBox[{"Dynamic", "[", 
                    RowBox[{"Graphics3D", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"flat", ",", 
                    RowBox[{"P11", "[", "time", "]"}], ",", 
                    RowBox[{"P21", "[", "time", "]"}], ",", "xaxis2", ",", 
                    "yaxis2", ",", "zaxis2", ",", 
                    RowBox[{"tether11", "[", "time", "]"}], ",", 
                    RowBox[{"tether21", "[", "time", "]"}], ",", 
                    RowBox[{"up", "[", "time", "]"}], ",", 
                    RowBox[{"out", "[", "time", "]"}], ",", 
                    RowBox[{"oneax", "[", "time", "]"}], ",", 
                    RowBox[{"twoax", "[", "time", "]"}], ",", 
                    RowBox[{"threeax", "[", "time", "]"}], ",", 
                    RowBox[{"tracep1", "[", "time", "]"}], ",", 
                    RowBox[{"tracep2", "[", "time", "]"}]}], "}"}], ",", 
                    RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
                    RowBox[{"ViewProjection", "->", "\"\<Perspective\>\""}], 
                    ",", 
                    RowBox[{"PlotRange", "\[Rule]", "20"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"600", ",", "600"}], "}"}]}]}], "]"}], "]"}], ",",
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                   RowBox[{"Dynamic", "[", 
                    RowBox[{"Graphics3D", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"earth", ",", 
                    RowBox[{"P13", "[", "time", "]"}], ",", 
                    RowBox[{"P23", "[", "time", "]"}], ",", 
                    RowBox[{"tether13", "[", "time", "]"}], ",", 
                    RowBox[{"tether23", "[", "time", "]"}], ",", 
                    RowBox[{"xaxis3", "[", "time", "]"}], ",", 
                    RowBox[{"yaxis3", "[", "time", "]"}], ",", 
                    RowBox[{"zaxis3", "[", "time", "]"}], ",", 
                    RowBox[{"tracep13", "[", "time", "]"}], ",", 
                    RowBox[{"tracep23", "[", "time", "]"}]}], "}"}], ",", 
                    RowBox[{"Background", " ", "\[Rule]", " ", "Black"}], ",", 
                    RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
                    RowBox[{"PlotRange", "\[Rule]", 
                    RowBox[{
                    RowBox[{"Max", "[", "radius", "]"}], "+", 
                    RowBox[{"0.1", "*", 
                    RowBox[{"Max", "[", "radius", "]"}]}]}]}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"900", ",", "600"}], "}"}]}], ",", 
                    RowBox[{
                    "ViewProjection", "\[Rule]", "\"\<Perspective\>\""}], ",", 
                    RowBox[{"ViewVector", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"camerapoint", "[", "time", "]"}], "]"}], ",", 
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"RC3", "[", "time", "]"}], "]"}]}], "}"}]}], ",", 
                    RowBox[{"Lighting", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Point\>\"", ",", " ", "White", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}]}], 
                    "]"}], "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], 
              "]"}], "\[IndentingNewLine]", "}"}], "}"}], ",", 
           RowBox[{"ItemSize", "\[Rule]", 
            RowBox[{"Dynamic", "[", "Automatic", "]"}]}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "plot", " ", "coordinates", " ", "and", " ", "show", " ", "next", 
          " ", "to", " ", "3", "d", " ", "view", " ", 
          RowBox[{"(", 
           RowBox[{"unless", " ", "cinematic", " ", "view", " ", "selected"}],
            ")"}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"switch", "\[Equal]", "\"\<Cinematic View\>\""}], ",", 
          RowBox[{"graphgrid", " ", "=", " ", "\[LetterSpace]"}], ",", 
          RowBox[{"graphgrid", " ", "=", " ", 
           RowBox[{"Grid", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"Plot", "[", 
                RowBox[{
                 RowBox[{"Evaluate", "[", 
                  RowBox[{
                   RowBox[{"\[Psi]", "[", "t", "]"}], "/.", 
                   "\[VeryThinSpace]", "system"}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"t", ",", "0", ",", "ranget"}], "}"}], ",", 
                 RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                 RowBox[{"FrameTicks", "\[Rule]", "Automatic"}], ",", 
                 RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                 RowBox[{"ImageSize", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"300", ",", "Automatic"}], "}"}]}], ",", 
                 RowBox[{"ImagePadding", "\[Rule]", "imagePadding"}], ",", 
                 RowBox[{"FrameLabel", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"\"\<time\>\"", ",", "\"\<\[Psi][t]\>\""}], 
                   "}"}]}]}], "]"}], "}"}], ",", "\n", "\t     ", 
              RowBox[{"{", 
               RowBox[{"Plot", "[", 
                RowBox[{
                 RowBox[{"Evaluate", "[", 
                  RowBox[{
                   RowBox[{"\[Alpha]", "[", "t", "]"}], "/.", 
                   "\[VeryThinSpace]", "system"}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"t", ",", "0", ",", "ranget"}], "}"}], ",", 
                 RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                 RowBox[{"FrameTicks", "\[Rule]", "Automatic"}], ",", 
                 RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                 RowBox[{"ImageSize", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"300", ",", "Automatic"}], "}"}]}], ",", 
                 RowBox[{"ImagePadding", "\[Rule]", "imagePadding"}], ",", 
                 RowBox[{"FrameLabel", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"\"\<time\>\"", ",", "\"\<\[Alpha][t]\>\""}], 
                   "}"}]}]}], "]"}], "}"}], ",", "\[IndentingNewLine]", "  ", 
              RowBox[{"{", 
               RowBox[{"Plot", "[", 
                RowBox[{
                 RowBox[{"Evaluate", "[", 
                  RowBox[{
                   RowBox[{"\[Gamma]", "[", "t", "]"}], "/.", 
                   "\[VeryThinSpace]", "system"}], "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"t", ",", "0", ",", "ranget"}], "}"}], ",", 
                 RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                 RowBox[{"FrameTicks", "\[Rule]", "Automatic"}], ",", 
                 RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                 RowBox[{"ImageSize", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"300", ",", "Automatic"}], "}"}]}], ",", 
                 RowBox[{"ImagePadding", "\[Rule]", "imagePadding"}], ",", 
                 RowBox[{"FrameLabel", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"\"\<time\>\"", ",", "\"\<\[Gamma][t]\>\""}], 
                   "}"}]}]}], "]"}], "}"}], ",", "\n", "\t     ", 
              RowBox[{"{", 
               RowBox[{"Plot", "[", 
                RowBox[{
                 RowBox[{"Evaluate", "[", 
                  RowBox[{
                   RowBox[{"rc", "[", "t", "]"}], "/.", "system"}], "]"}], 
                 ",", 
                 RowBox[{"{", 
                  RowBox[{"t", ",", "0", ",", "ranget"}], "}"}], ",", 
                 RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                 RowBox[{"FrameTicks", "\[Rule]", "Automatic"}], ",", 
                 RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                 RowBox[{"ImageSize", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"300", ",", "Automatic"}], "}"}]}], ",", 
                 RowBox[{"ImagePadding", "\[Rule]", "imagePadding"}], ",", 
                 RowBox[{"FrameLabel", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"\"\<time\>\"", ",", "\"\<r[t]\>\""}], "}"}]}]}], 
                "]"}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"Plot", "[", 
                RowBox[{
                 RowBox[{"Evaluate", "[", 
                  RowBox[{
                   RowBox[{"\[Theta]", "[", "t", "]"}], "/.", "system"}], 
                  "]"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"t", ",", "0", ",", "ranget"}], "}"}], ",", 
                 RowBox[{"Frame", "\[Rule]", "True"}], ",", 
                 RowBox[{"FrameTicks", "\[Rule]", "Automatic"}], ",", 
                 RowBox[{"GridLines", "\[Rule]", "Automatic"}], ",", 
                 RowBox[{"ImageSize", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"300", ",", "Automatic"}], "}"}]}], ",", 
                 RowBox[{"ImagePadding", "\[Rule]", "imagePadding"}], ",", 
                 RowBox[{"FrameLabel", "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"\"\<time\>\"", ",", "\"\<\[Theta][t]\>\""}], 
                   "}"}]}]}], "]"}], "}"}]}], "}"}], "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
         "Update", " ", "view", " ", "to", " ", "display", " ", "graphs", " ",
           "and", " ", "3", "d", " ", "graphics"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"output", " ", "=", " ", 
         RowBox[{"Grid", "[", 
          RowBox[{"{", 
           RowBox[{"{", 
            RowBox[{"graphgrid", ",", "graphicsgrid"}], "}"}], "}"}], 
          "]"}]}]}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"button", " ", "options"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "\[IndentingNewLine]", 
      "]"}], ",", 
     RowBox[{"(*", 
      RowBox[{"end", " ", "of", " ", "update", " ", "button"}], "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Manipulate", " ", "Controls", " ", "and", " ", "sliders"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "switch", ",", "\"\<Simplified View\>\"", ",", "\"\<3D view:\>\""}], 
        "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Earth Scale View\>\"", ",", "\"\<Simplified View\>\"", ",", 
         "\"\<Body Frame\>\"", ",", "\"\<Cinematic View\>\""}], "}"}], ",", 
       "RadioButton", ",", 
       RowBox[{"Appearance", "->", 
        RowBox[{"\"\<Vertical\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"2", ",", "2"}], "}"}]}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\"\<System Data\>\"", ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\[Mu]", ",", 
         RowBox[{"3.9877848", " ", 
          SuperscriptBox["10", "14"]}], ",", " ", 
         "\"\<Gravitational Parameter\>\""}], "}"}], ",", 
       RowBox[{"ControlType", "\[Rule]", "InputField"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"Mp", ",", "1000", ",", " ", "\"\<Payload Mass (kg)\>\""}], 
        "}"}], ",", 
       RowBox[{"ControlType", "\[Rule]", "InputField"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "6870000", ",", "\"\<Semimajor Axis\>\""}], "}"}], 
       ",", "6870000", ",", "50900000", ",", 
       RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"period", ",", "period", ",", "\"\<Period\>\""}], "}"}], "}"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"e", ",", "0", ",", "\"\<Eccentricity\>\""}], "}"}], ",", "0",
        ",", "0.99", ",", 
       RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\[Tau]", ",", "0", ",", "\"\<Motor Torque\>\""}], "}"}], ",", 
       RowBox[{"-", "20000000"}], ",", "20000000", ",", 
       RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"l", ",", "50000", ",", "\"\<Tether Length (m)\>\""}], "}"}], 
       ",", "100", ",", "100000", ",", 
       RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"ranget", ",", 
         RowBox[{"period", "*", "2"}], ",", "\"\<Maximum Time\>\""}], "}"}], 
       ",", "1000", ",", 
       RowBox[{"period", "*", "20"}], ",", 
       RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\"\<\\n\>\"", ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"time", ",", "1", ",", "\"\<Time\>\""}], "}"}], ",", "1", ",",
        "ranget", ",", 
       RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
       RowBox[{"AnimationRunning", "\[Rule]", "False"}], ",", 
       RowBox[{"AnimationRate", "\[Rule]", 
        RowBox[{"1", "/", "100"}]}], ",", 
       RowBox[{"RefreshRate", "\[Rule]", "600"}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\"\<\\nInitial Conditions\>\"", ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "psi0", " ", ",", " ", "0", ",", "\"\<Yaw Angle, \[Psi]\>\""}], "}"}],
        ",", 
       RowBox[{
        RowBox[{"-", "2"}], " ", "Pi"}], ",", 
       RowBox[{"2", "Pi"}], ",", 
       RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "alpha0", " ", ",", " ", "0", ",", "\"\<Pitch Angle, \[Alpha]\>\""}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"-", " ", "2"}], " ", "Pi"}], ",", 
       RowBox[{"2", " ", "Pi"}], ",", 
       RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "gamma0", " ", ",", " ", "0", ",", "\"\<Roll Angle, \[Gamma]\>\""}], 
        "}"}], ",", 
       RowBox[{
        RowBox[{"-", " ", "2"}], " ", "Pi"}], ",", 
       RowBox[{"2", "Pi"}], ",", 
       RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"output", ",", 
       RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\"\<\\n \\n \\n\nPreview animation pre-evaluates each frame of a \
simulation and displays it, \nso it can create smoother animations than the \
default animations shown, but \na large number of frames may cause a crash. \
To save an animation after a\npreview is created, uncomment the 'Export' cell \
below to save as an avi. \nFiles are ~1mb per frame so again a large number \
of frames (>100) will take\na long time or may cause the program to \
crash\>\"", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Button", "[", 
      RowBox[{"\"\<Preview Animation\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"preview", " ", "animation"}], ",", " ", 
         RowBox[{"pre", "-", 
          RowBox[{
          "evaluates", " ", "all", " ", "the", " ", "3", "d", " ", "images", 
           " ", "and", " ", "displays", " ", "as", " ", "animation"}]}], ",", 
         " ", 
         RowBox[{
         "be", " ", "careful", " ", "about", " ", "having", " ", "too", " ", 
          "many", " ", "frames"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"FinishDynamic", "[", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"makeframes", "[", "ttime_", "]"}], " ", ":=", " ", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"switch", "\[Equal]", "\"\<Earth Scale View\>\""}], ",", 
           RowBox[{"Dynamic", "[", 
            RowBox[{"Graphics3D", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"trace1", "[", "ttime", "]"}], ",", "earth", ",", 
                RowBox[{"point1", "[", "ttime", "]"}]}], "}"}], ",", 
              RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
              RowBox[{"PlotRange", "\[Rule]", 
               RowBox[{
                RowBox[{"Max", "[", "radius", "]"}], "+", 
                RowBox[{"0.1", "*", 
                 RowBox[{"Max", "[", "radius", "]"}]}]}]}], ",", 
              RowBox[{"ImageSize", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"600", ",", "600"}], "}"}]}], ",", 
              RowBox[{"ViewPoint", "\[Rule]", "Above"}], ",", 
              RowBox[{"ViewProjection", "\[Rule]", "\"\<Orthographic\>\""}], 
              ",", 
              RowBox[{"Lighting", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"{", 
                 RowBox[{"\"\<Ambient\>\"", ",", " ", "White"}], "}"}], 
                "}"}]}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"switch", "\[Equal]", "\"\<Simplified View\>\""}], ",", 
             RowBox[{"Dynamic", "[", 
              RowBox[{"Graphics3D", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"trace", "[", "ttime", "]"}], ",", "earth1", ",", 
                  RowBox[{"P1", "[", "ttime", "]"}], ",", 
                  RowBox[{"P2", "[", "ttime", "]"}], ",", 
                  RowBox[{"tether1", "[", "ttime", "]"}], ",", 
                  RowBox[{"tether2", "[", "ttime", "]"}], ",", 
                  RowBox[{"xaxis", "[", "ttime", "]"}], ",", 
                  RowBox[{"yaxis", "[", "ttime", "]"}], ",", 
                  RowBox[{"zaxis", "[", "ttime", "]"}]}], "}"}], ",", 
                RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
                RowBox[{"PlotRange", "\[Rule]", 
                 RowBox[{"1.1", "*", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"radius", "*", "rfactor"}], "]"}], "+", "rp"}], 
                   ")"}]}]}], ",", 
                RowBox[{"ImageSize", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"600", ",", "600"}], "}"}]}], ",", 
                RowBox[{"ViewPoint", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"1.3", ",", 
                   RowBox[{"-", "2.4"}], ",", "2"}], "}"}]}]}], "]"}], "]"}], 
             ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"switch", "\[Equal]", "\"\<Body Frame\>\""}], ",", 
               RowBox[{"Dynamic", "[", 
                RowBox[{"Graphics3D", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"flat", ",", 
                    RowBox[{"P11", "[", "ttime", "]"}], ",", 
                    RowBox[{"P21", "[", "ttime", "]"}], ",", "xaxis2", ",", 
                    "yaxis2", ",", "zaxis2", ",", 
                    RowBox[{"tether11", "[", "ttime", "]"}], ",", 
                    RowBox[{"tether21", "[", "ttime", "]"}], ",", 
                    RowBox[{"up", "[", "ttime", "]"}], ",", 
                    RowBox[{"out", "[", "ttime", "]"}], ",", 
                    RowBox[{"oneax", "[", "ttime", "]"}], ",", 
                    RowBox[{"twoax", "[", "ttime", "]"}], ",", 
                    RowBox[{"threeax", "[", "ttime", "]"}], ",", 
                    RowBox[{"tracep1", "[", "ttime", "]"}], ",", 
                    RowBox[{"tracep2", "[", "ttime", "]"}]}], "}"}], ",", 
                  RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
                  RowBox[{"ViewProjection", "->", "\"\<Perspective\>\""}], 
                  ",", 
                  RowBox[{"PlotRange", "\[Rule]", "20"}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"600", ",", "600"}], "}"}]}]}], "]"}], "]"}], ",",
                "\[IndentingNewLine]", "\[IndentingNewLine]", 
               RowBox[{"Dynamic", "[", 
                RowBox[{"Graphics3D", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"earth", ",", 
                    RowBox[{"P13", "[", "ttime", "]"}], ",", 
                    RowBox[{"P23", "[", "ttime", "]"}], ",", 
                    RowBox[{"tether13", "[", "ttime", "]"}], ",", 
                    RowBox[{"tether23", "[", "ttime", "]"}], ",", 
                    RowBox[{"xaxis3", "[", "ttime", "]"}], ",", 
                    RowBox[{"yaxis3", "[", "ttime", "]"}], ",", 
                    RowBox[{"zaxis3", "[", "ttime", "]"}], ",", 
                    RowBox[{"tracep13", "[", "ttime", "]"}], ",", 
                    RowBox[{"tracep23", "[", "ttime", "]"}]}], "}"}], ",", 
                  RowBox[{"Background", " ", "\[Rule]", " ", "Black"}], ",", 
                  RowBox[{"Boxed", "\[Rule]", "False"}], ",", 
                  RowBox[{"PlotRange", "\[Rule]", 
                   RowBox[{
                    RowBox[{"Max", "[", "radius", "]"}], "+", 
                    RowBox[{"0.1", "*", 
                    RowBox[{"Max", "[", "radius", "]"}]}]}]}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"900", ",", "600"}], "}"}]}], ",", 
                  RowBox[{
                  "ViewProjection", "\[Rule]", "\"\<Perspective\>\""}], ",", 
                  RowBox[{"ViewVector", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"camerapoint", "[", "ttime", "]"}], "]"}], ",", 
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"RC3", "[", "ttime", "]"}], "]"}]}], "}"}]}], ",", 
                  RowBox[{"Lighting", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<Point\>\"", ",", " ", "White", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "}"}]}]}], 
                 "]"}], "\[IndentingNewLine]", "]"}]}], "]"}]}], "]"}]}], 
          "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Do", "[", 
         RowBox[{
          RowBox[{"frames", " ", "=", " ", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"makeframes", "[", "zzz", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"zzz", ",", "animationstart", ",", "animationend", ",", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"animationend", "-", "animationstart"}], ")"}], "/", 
                "noframes"}]}], "}"}]}], "]"}]}], ",", "1"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"output", " ", "=", " ", 
         RowBox[{"ListAnimate", "[", 
          RowBox[{"frames", ",", 
           RowBox[{"AnimationRunning", "\[Rule]", "True"}]}], "]"}]}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"preview", " ", "button", " ", "options"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"Method", "\[Rule]", "\"\<Queued\>\""}]}], "]"}], ",", 
     RowBox[{"(*", 
      RowBox[{"end", " ", "of", " ", "preview", " ", "button"}], "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"preview", " ", "function", " ", "controls"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"framerate", " ", ",", "1", ",", "\"\<Frame Rate\>\""}], 
        "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
        "1", ",", "2", ",", "3", ",", "5", ",", "10", ",", "15", ",", "30", 
         ",", "60"}], "}"}], ",", 
       RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "noframes", " ", ",", " ", "10", ",", "\"\<Number of Frames\>\""}], 
        "}"}], ",", "1", ",", "1000", ",", 
       RowBox[{"Appearance", "->", "\"\<Labeled\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "animationstart", ",", "0", ",", " ", 
         "\"\<Animation Start Time\>\""}], "}"}], ",", "0", ",", 
       "animationend", ",", 
       RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "animationend", ",", "10", ",", " ", "\"\<Animation End Time\>\""}], 
        "}"}], ",", 
       RowBox[{"animationstart", "+", "1"}], ",", "ranget", ",", 
       RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Manipulate", " ", "options"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"SynchronousUpdating", "\[Rule]", "False"}], ",", 
     RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], "]"}]}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.735650871285949*^9, 3.7356509108037024`*^9}, {
   3.7356512599918733`*^9, 3.735651375956335*^9}, {3.735651449505784*^9, 
   3.735651464071477*^9}, {3.7356515374997873`*^9, 3.7356516423084145`*^9}, {
   3.735651711431814*^9, 3.73565174560518*^9}, {3.73565178423121*^9, 
   3.735651787196915*^9}, {3.735651841522313*^9, 3.7356518530816135`*^9}, {
   3.7356519902076244`*^9, 3.735652012179384*^9}, {3.735652606765967*^9, 
   3.7356526241196547`*^9}, {3.7356527339137774`*^9, 3.735652738989146*^9}, {
   3.735652850226242*^9, 3.735652874888184*^9}, {3.735653024652313*^9, 
   3.7356530282302*^9}, {3.735653329007392*^9, 3.735653382322549*^9}, {
   3.735653450056091*^9, 3.7356535262820206`*^9}, {3.7356536177734647`*^9, 
   3.735653625700078*^9}, {3.735653663439722*^9, 3.735653666297427*^9}, 
   3.7356537244599357`*^9, {3.735653854437956*^9, 3.735653873818943*^9}, {
   3.735654282104251*^9, 3.7356543961324277`*^9}, {3.735654441743859*^9, 
   3.735654446665337*^9}, {3.7356545716598825`*^9, 3.735654574204945*^9}, {
   3.7356546718227625`*^9, 3.735654680793643*^9}, {3.7356547294944377`*^9, 
   3.735654730951268*^9}, {3.7356548504566383`*^9, 3.735654854570654*^9}, {
   3.7356551082061415`*^9, 3.735655124882101*^9}, {3.7397838286406965`*^9, 
   3.739783952873523*^9}, {3.7397839883606386`*^9, 3.73978403751025*^9}, {
   3.7397842184524517`*^9, 3.7397842726684904`*^9}, {3.739784338162339*^9, 
   3.739784371354621*^9}, {3.7397844300217595`*^9, 3.7397844309053965`*^9}, {
   3.7397844700824876`*^9, 3.7397844761352963`*^9}, {3.7397846867721033`*^9, 
   3.7397847391390843`*^9}, {3.739784842262354*^9, 3.7397848504305067`*^9}, {
   3.739784917194001*^9, 3.739784917735547*^9}, {3.73978500450854*^9, 
   3.739785013844546*^9}, {3.7397850718870397`*^9, 3.7397851949819546`*^9}, {
   3.7397852488180127`*^9, 3.739785282660525*^9}, {3.7397853199189043`*^9, 
   3.7397853326867647`*^9}, {3.739785414100587*^9, 3.7397854332453985`*^9}, 
   3.739785555878502*^9, {3.7397856083352427`*^9, 3.7397856120542994`*^9}, {
   3.73978572901956*^9, 3.7397857558149123`*^9}, {3.739785937394373*^9, 
   3.739785938719863*^9}, {3.739786257488942*^9, 3.7397863511565275`*^9}, {
   3.739786467264082*^9, 3.739786473145354*^9}, {3.739786526714755*^9, 
   3.7397865280052643`*^9}, {3.7397866910558558`*^9, 
   3.7397867052408886`*^9}, {3.739789245540989*^9, 3.7397892713808985`*^9}, {
   3.7397893112153883`*^9, 3.739789541291212*^9}, {3.7397895778085723`*^9, 
   3.7397896089134045`*^9}, {3.739789686270567*^9, 3.7397897889749565`*^9}, 
   3.739789833054097*^9, {3.7397898832478895`*^9, 3.7397899389310045`*^9}, {
   3.739789992151703*^9, 3.73978999998077*^9}, {3.7397900600810733`*^9, 
   3.739790064705708*^9}, {3.7397901172751484`*^9, 3.7397901457610216`*^9}, {
   3.7397902000418825`*^9, 3.739790201780199*^9}, {3.7397907380324078`*^9, 
   3.7397907651279593`*^9}, {3.7397909290137625`*^9, 3.7397911440348396`*^9}, 
   3.7397911773986316`*^9, {3.739791210952914*^9, 3.739791263655997*^9}, {
   3.7397913138906794`*^9, 3.739791427632557*^9}, {3.7397914617872343`*^9, 
   3.7397914659401655`*^9}, {3.7397914998095703`*^9, 
   3.7397915926523275`*^9}, {3.739791639602792*^9, 3.739791667535106*^9}, {
   3.7397917077535706`*^9, 3.7397917105730653`*^9}, {3.7397917700310526`*^9, 
   3.7397918137431755`*^9}, {3.739791996951314*^9, 3.7397920009965153`*^9}, {
   3.739792052721197*^9, 3.739792087500205*^9}, {3.7397921250567865`*^9, 
   3.7397921609258795`*^9}, {3.7397922162838635`*^9, 3.7397922934535275`*^9}, 
   3.7397923437829742`*^9, {3.7397924068214045`*^9, 3.739792409434418*^9}, {
   3.7397924465591545`*^9, 3.7397924469191914`*^9}, {3.7397925194793515`*^9, 
   3.7397925259540396`*^9}, {3.739792597241604*^9, 3.739792625482095*^9}, {
   3.7397928990575438`*^9, 3.7397929001575637`*^9}, {3.7397930903580065`*^9, 
   3.739793091793169*^9}, {3.73979317847839*^9, 3.739793192332348*^9}, {
   3.739793601740018*^9, 3.739793611760803*^9}, {3.7397936497715187`*^9, 
   3.7397936501462383`*^9}, {3.7397936863869286`*^9, 3.739793693428011*^9}, 
   3.739793998344261*^9, {3.7397940990713863`*^9, 3.7397941000879803`*^9}, {
   3.7397941632826247`*^9, 3.739794277230878*^9}, {3.739794378326122*^9, 
   3.739794491406997*^9}, {3.739794554654355*^9, 3.739794701476766*^9}, {
   3.739794820611166*^9, 3.7397949227590003`*^9}, 3.7397968046298103`*^9, {
   3.7397968848084373`*^9, 3.7397968865540037`*^9}, 3.7397981859334*^9, {
   3.7398631036819277`*^9, 3.739863104421912*^9}, {3.739863177691016*^9, 
   3.7398632627575545`*^9}, {3.739863501026346*^9, 3.739863514282874*^9}, {
   3.7398640952714176`*^9, 3.739864111893973*^9}, {3.739865240795692*^9, 
   3.739865391086793*^9}, {3.739865827178684*^9, 3.7398658332577944`*^9}, {
   3.7398658637062206`*^9, 3.739866003025695*^9}, {3.7398679918584976`*^9, 
   3.7398680561877594`*^9}, {3.7398684132653646`*^9, 
   3.7398684292657814`*^9}, {3.739868491945717*^9, 3.739868847879614*^9}, {
   3.739869276041293*^9, 3.7398693457218294`*^9}, {3.7399461575657864`*^9, 
   3.7399461759904094`*^9}, {3.739946251391775*^9, 3.739946276867843*^9}, {
   3.7401353261780853`*^9, 3.740135371673642*^9}, {3.740135404653624*^9, 
   3.7401354426267138`*^9}, 3.7401354804713144`*^9, {3.7401355229974403`*^9, 
   3.740135524281644*^9}, {3.740135566346467*^9, 3.74013556863721*^9}, 
   3.7415891473521605`*^9},ExpressionUUID->"65a15be3-4410-4b2b-a7d6-\
94cf747580b2"]
}, Open  ]],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a$$ = 6870000, $CellContext`alpha0$$ = 
    0, $CellContext`animationend$$ = 10, $CellContext`animationstart$$ = 
    0, $CellContext`e$$ = 0, $CellContext`framerate$$ = 
    1, $CellContext`gamma0$$ = 0, $CellContext`l$$ = 
    50000, $CellContext`Mp$$ = 1000, $CellContext`noframes$$ = 
    10, $CellContext`output$$ = Grid[{{
       Grid[{{
          Graphics[{{{{}, {}, 
              Annotation[{
                Directive[
                 Opacity[1.], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[1.6]], 
                Line[CompressedData["
1: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
L75mhbJdUD3C55lZvmD4Pz2pTxg=
                 "]]}, "Charting`Private`Tag$2732#1"]}}, {}, {}}, {
           DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
            AxesOrigin -> {0, 0}, FrameTicks -> {{Automatic, 
               Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
               Charting`ScaledFrameTicks[{Identity, Identity}]}}, 
            GridLines -> {Automatic, Automatic}, DisplayFunction -> Identity, 
            PlotRangePadding -> {{
               Scaled[0.02], 
               Scaled[0.02]}, {
               Scaled[0.05], 
               Scaled[0.05]}}, PlotRangeClipping -> True, 
            ImagePadding -> {{100, 10}, {25, 10}}, DisplayFunction -> 
            Identity, AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
            AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
            Identity, Frame -> {{True, True}, {True, True}}, 
            FrameLabel -> {{"\[Psi][t]", None}, {"time", None}}, 
            FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
            GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
              GrayLevel[0.5, 0.4]], ImagePadding -> {{100, 10}, {25, 10}}, 
            ImageSize -> {300, Automatic}, 
            Method -> {
             "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
              AbsolutePointSize[6], "ScalingFunctions" -> None, 
              "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                  (Identity[#]& )[
                   Part[#, 1]], 
                  (Identity[#]& )[
                   Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                  (Identity[#]& )[
                   Part[#, 1]], 
                  (Identity[#]& )[
                   Part[#, 2]]}& )}}, 
            PlotRange -> {{0, 11331.283692690682`}, {-0.00018693573533936635`,
               0.0002489224917658132}}, PlotRangeClipping -> True, 
            PlotRangePadding -> {{
               Scaled[0.02], 
               Scaled[0.02]}, {
               Scaled[0.02], 
               Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}]}, {
          Graphics[{{{{}, {}, 
              Annotation[{
                Directive[
                 Opacity[1.], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[1.6]], 
                Line[CompressedData["
1:eJxFyglIEwAYBeAlUkMX2Zhmk83NDFtbljaFVFBTMKupWBlNQY2W1gR1pVTO
aNkyy0RHh9oy88DUNXVz3mdzpo4pIR1KOsK8h3khW5BWUP//4PH44DEvJkcK
rAgEAu9P/64pYS5EHO7uT/iXsbQO688G24D/Js5oBcUGJzCjJMRBbGCDObdy
lpIMvmDPxBq+wHAK7GVsy483RIObqNraWIMQTF6S2WjMYvwruOQHUin4yJeW
8jhhLjgzecVdtFYADtWES0NTn4LFc4SUjWNF4D3PN7+al+XgnX1l8URuKfi4
+gd9i1IGrg36Vkj4VA4e2G0Z5eRVggujfMa0wiqw3I/xQsCqBp8tOuwmItWC
e44KrlfPKMBxyf63F0uV4PF8Jut0QD24pC1txY3RAG5/NUlvJavAqvJxhZGg
BgeZDxTZGtHuxNwF00gjWJ0YWDxarwGT53Jqwh83gfUus84ScTOYrny21hzd
Ah5a53MqeK3gCL5Kt9+3DZxiF9OpcGwHL0io1HliB3gziP3x4Dza5DqyvE3X
Ceb2ZqfmqbvADkpZBEPWDWaxLwypA3vAT9xkTnwVOklNoekZveAVOfPDs0K0
VnmeKyC+AwfSHU/mSdAcmovdXTP6UvA56Y0ELTh0kPx20IjOSLdk0SL6wFQ1
y9avC32Z9z1Y46UDb+0aOORRiY7Re/50qUK33H/ZT6lGi36JYs0K9MwCraC7
ET2su7bO60PLM5zbr06hLd4Ps2Om0VGr62fCZtF2V4ZMHovoe1FpdMsqWuih
l2Rb9YMHTF5hN63Rrm9KqcLt6El6ujrMBh1JYk7bk9F17x817KCgSVkbmRZ7
dL9F7zCxF71P4z017IS+k/K6roeGnmCTxCpntM9s+okKJvo3klssow==
                 "]]}, "Charting`Private`Tag$2794#1"]}}, {}, {}}, {
           DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
            AxesOrigin -> {0, 0}, FrameTicks -> {{Automatic, 
               Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
               Charting`ScaledFrameTicks[{Identity, Identity}]}}, 
            GridLines -> {Automatic, Automatic}, DisplayFunction -> Identity, 
            PlotRangePadding -> {{
               Scaled[0.02], 
               Scaled[0.02]}, {
               Scaled[0.05], 
               Scaled[0.05]}}, PlotRangeClipping -> True, 
            ImagePadding -> {{100, 10}, {25, 10}}, DisplayFunction -> 
            Identity, AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
            AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
            Identity, Frame -> {{True, True}, {True, True}}, 
            FrameLabel -> {{"\[Alpha][t]", None}, {"time", None}}, 
            FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
            GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
              GrayLevel[0.5, 0.4]], ImagePadding -> {{100, 10}, {25, 10}}, 
            ImageSize -> {300, Automatic}, 
            Method -> {
             "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
              AbsolutePointSize[6], "ScalingFunctions" -> None, 
              "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                  (Identity[#]& )[
                   Part[#, 1]], 
                  (Identity[#]& )[
                   Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                  (Identity[#]& )[
                   Part[#, 1]], 
                  (Identity[#]& )[
                   Part[#, 2]]}& )}}, 
            PlotRange -> {{0, 11331.283692690682`}, {-1., 1.}}, 
            PlotRangeClipping -> True, PlotRangePadding -> {{
               Scaled[0.02], 
               Scaled[0.02]}, {
               Scaled[0.02], 
               Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}]}, {
          Graphics[{{{{}, {}, 
              Annotation[{
                Directive[
                 Opacity[1.], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[1.6]], 
                Line[CompressedData["
1:eJxFyglIEwAYBeAlUkMX2Zhmk83NDFtbljaFVFBTMKupWBlNQY2W1gR1pVTO
aNkyy0RHh9oy88DUNXVz3mdzpo4pIR1KOsK8h3khW5BWUP//4PH44DEvJkcK
rAgEAu9P/64pYS5EHO7uT/iXsbQO688G24D/Js5oBcUGJzCjJMRBbGCDObdy
lpIMvmDPxBq+wHAK7GVsy483RIObqNraWIMQTF6S2WjMYvwruOQHUin4yJeW
8jhhLjgzecVdtFYADtWES0NTn4LFc4SUjWNF4D3PN7+al+XgnX1l8URuKfi4
+gd9i1IGrg36Vkj4VA4e2G0Z5eRVggujfMa0wiqw3I/xQsCqBp8tOuwmItWC
e44KrlfPKMBxyf63F0uV4PF8Jut0QD24pC1txY3RAG5/NUlvJavAqvJxhZGg
BgeZDxTZGtHuxNwF00gjWJ0YWDxarwGT53Jqwh83gfUus84ScTOYrny21hzd
Ah5a53MqeK3gCL5Kt9+3DZxiF9OpcGwHL0io1HliB3gziP3x4Dza5DqyvE3X
Ceb2ZqfmqbvADkpZBEPWDWaxLwypA3vAT9xkTnwVOklNoekZveAVOfPDs0K0
VnmeKyC+AwfSHU/mSdAcmovdXTP6UvA56Y0ELTh0kPx20IjOSLdk0SL6wFQ1
y9avC32Z9z1Y46UDb+0aOORRiY7Re/50qUK33H/ZT6lGi36JYs0K9MwCraC7
ET2su7bO60PLM5zbr06hLd4Ps2Om0VGr62fCZtF2V4ZMHovoe1FpdMsqWuih
l2Rb9YMHTF5hN63Rrm9KqcLt6El6ujrMBh1JYk7bk9F17x817KCgSVkbmRZ7
dL9F7zCxF71P4z017IS+k/K6roeGnmCTxCpntM9s+okKJvo3klssow==
                 "]]}, "Charting`Private`Tag$2836#1"]}}, {}, {}}, {
           DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
            AxesOrigin -> {0, 0}, FrameTicks -> {{Automatic, 
               Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
               Charting`ScaledFrameTicks[{Identity, Identity}]}}, 
            GridLines -> {Automatic, Automatic}, DisplayFunction -> Identity, 
            PlotRangePadding -> {{
               Scaled[0.02], 
               Scaled[0.02]}, {
               Scaled[0.05], 
               Scaled[0.05]}}, PlotRangeClipping -> True, 
            ImagePadding -> {{100, 10}, {25, 10}}, DisplayFunction -> 
            Identity, AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
            AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
            Identity, Frame -> {{True, True}, {True, True}}, 
            FrameLabel -> {{"\[Gamma][t]", None}, {"time", None}}, 
            FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
            GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
              GrayLevel[0.5, 0.4]], ImagePadding -> {{100, 10}, {25, 10}}, 
            ImageSize -> {300, Automatic}, 
            Method -> {
             "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
              AbsolutePointSize[6], "ScalingFunctions" -> None, 
              "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                  (Identity[#]& )[
                   Part[#, 1]], 
                  (Identity[#]& )[
                   Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                  (Identity[#]& )[
                   Part[#, 1]], 
                  (Identity[#]& )[
                   Part[#, 2]]}& )}}, 
            PlotRange -> {{0, 11331.283692690682`}, {-1., 1.}}, 
            PlotRangeClipping -> True, PlotRangePadding -> {{
               Scaled[0.02], 
               Scaled[0.02]}, {
               Scaled[0.02], 
               Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}]}, {
          Graphics[{{{{}, {}, 
              Annotation[{
                Directive[
                 Opacity[1.], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[1.6]], 
                Line[CompressedData["
1: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
j/4f/d+v/g==
                 "]]}, "Charting`Private`Tag$2878#1"]}}, {}, {}}, {
           DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
            AxesOrigin -> {0, 6.867815952815744*^6}, 
            FrameTicks -> {{Automatic, 
               Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
               Charting`ScaledFrameTicks[{Identity, Identity}]}}, 
            GridLines -> {Automatic, Automatic}, DisplayFunction -> Identity, 
            PlotRangePadding -> {{
               Scaled[0.02], 
               Scaled[0.02]}, {
               Scaled[0.05], 
               Scaled[0.05]}}, PlotRangeClipping -> True, 
            ImagePadding -> {{100, 10}, {25, 10}}, DisplayFunction -> 
            Identity, AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
            AxesLabel -> {None, None}, 
            AxesOrigin -> {0, 6.867815952815744*^6}, DisplayFunction :> 
            Identity, Frame -> {{True, True}, {True, True}}, 
            FrameLabel -> {{"r[t]", None}, {"time", None}}, 
            FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
            GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
              GrayLevel[0.5, 0.4]], ImagePadding -> {{100, 10}, {25, 10}}, 
            ImageSize -> {300, Automatic}, 
            Method -> {
             "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
              AbsolutePointSize[6], "ScalingFunctions" -> None, 
              "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                  (Identity[#]& )[
                   Part[#, 1]], 
                  (Identity[#]& )[
                   Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                  (Identity[#]& )[
                   Part[#, 1]], 
                  (Identity[#]& )[
                   Part[#, 2]]}& )}}, 
            PlotRange -> {{0, 11331.283692690682`}, {6.867815952815744*^6, 
              6.87*^6}}, PlotRangeClipping -> True, PlotRangePadding -> {{
               Scaled[0.02], 
               Scaled[0.02]}, {
               Scaled[0.02], 
               Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}]}, {
          Graphics[{{{{}, {}, 
              Annotation[{
                Directive[
                 Opacity[1.], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[1.6]], 
                Line[CompressedData["
1:eJwVxXdQUwcAB+AUUVJAjBEQAwkJM0+GQMHWcX0/1EpRQRzFE3EboIwGkKEl
VtlDpfBQhrJkCAqiJCJTdsJII7WeVbBILWXKISBHk1ak7R/ffbxTwv0CNRqN
5vaf/5/yHXcR7bUlac2aT4ad0r/sD29Sf6HQgsrnylZOhpCkj3YIbigMoRNp
59NPXSS5+S76IoUVthUELj2ifiStv0+eDlRswe7bwsFSqoB08LvrJVDsRoV2
EJVH3SedhhrSTiqOoMisLu4G1UI+YnVUHFcEQI+deDiP6iOZ05RmjVKE7nXH
3nmc/Z10qnRkJsXHgydA2HDwOGn3sq74RMAVMObP1H5hOkNeEM7ahr5PR9aL
6AXG6XnStWZvvGvIdbzaFnnijJeSFI3Tghc25eDD651GP9/+QK7N+vibciYX
UTmNFwqFNKzsLDpJdyxEY9FFYYavGrZJ3nGWdItweHpmGTNFHRXb32TTfi3G
mpD1F3YmrUD3atUz69RSjCRO1oWJ6Mj23NzfEVCG3gM/Cfk3NZG7lXtTQNzB
ErO2NPm6Ng7mbLAM1a7ANfpQun+DDlo/E4TdGa1E74jkYJ4/AyeE5A9vC6tg
n9Di3i9YjYE0HrEHD5B2tihkXwQT+Q3hs5bcargG1Rvnha1BY8FrTj1TDDWr
A2LTJF2Iiwcqh2gS0MqNqgsz9bBdyc/RGpIgscMi5T2lD1v6lcmpvodQ1Mt9
Y0rWQuLnfOPZgxr8kyysmyg2AHM8+e7eq49wbuOScE/+OshNxoyjRbVImg/v
nL7HAqcq833tkTo0lTXlBlUYonfey7rErR42shLahmYjeHiJpeZbGjBwvGtw
Rs5GMMP7caVBI/ziaSfTuziYjGaxJuhNuDWw+lbkS2N83G71fP1EE8beKq3z
A7iYMuub+UT6GD2bDG9fGufCsS0xJFXSDLuJCe6KYB70qygPLtUCu64K3/PT
PBBWh3slzq3Y1ViuTI00wTVLytBL3Aqx8fK5tL9MECjRZcu5bbiXEOvDCDfF
bC7vaWZ2G2ajbKzsFk3RUXXIUUBvhzCLEm4WmcGZY7ArNbod432XM4aXm8Oa
bcKIUbZjKGhVv8ZVc5zZ8U38Od8O7HzWN6qnZQHXHua9nqEO0LMfxLdlWCAq
QhXL9ugEkVXw1aE1lmBJCK2tzZ3wNFnZ5ZdmCR+3P3fUOElxSqnDMjDgY2lV
t419qRQ2VxedJZl8eMsd/jYpk+JDgws1ns1HXUKeTPeOFJaucX+wb/IRuhh6
XFkpRfux5zFJBXyMTrLTWx5Kccl7sP1oOR9PpGfn3TqlqMRD0Bv4yI0ybvQf
lkLHdtHx6CAfqo0pid4jUlg4LMZSQ3x4zs0fcB+T4vPQhV+63vDB+LZ3yv6t
FClxz4MdRvmI8wznqOakmNXYU6nxjo8Ae3l0opoMp/fvNhHTCHRPObmfV5ch
x0EVPKZGwKy8kBWwQoZl8uIWo+UEXnMiJO6aMjiqz3gnfkpgvzZvRI8pg0ut
f5Y3k8D9rsvVGroybDmnPpquS0A7duGCSk+GfdW5jl36BGQquf7gOhkYgT1P
7Q0JmNZsHH5iKEPf0WNcXzaBS8G37reyZXhVNvddrjGBQSttkdhYBjIm4fFT
HoHNYxFfl/BkUDNnaWuYEfgXBTs4ew==
                 "]]}, "Charting`Private`Tag$2920#1"]}}, {}, {}}, {
           DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
            AxesOrigin -> {0, 0}, FrameTicks -> {{Automatic, 
               Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
               Charting`ScaledFrameTicks[{Identity, Identity}]}}, 
            GridLines -> {Automatic, Automatic}, DisplayFunction -> Identity, 
            PlotRangePadding -> {{
               Scaled[0.02], 
               Scaled[0.02]}, {
               Scaled[0.05], 
               Scaled[0.05]}}, PlotRangeClipping -> True, 
            ImagePadding -> {{100, 10}, {25, 10}}, DisplayFunction -> 
            Identity, AspectRatio -> GoldenRatio^(-1), Axes -> {True, True}, 
            AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
            Identity, Frame -> {{True, True}, {True, True}}, 
            FrameLabel -> {{"\[Theta][t]", None}, {"time", None}}, 
            FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
            GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
              GrayLevel[0.5, 0.4]], ImagePadding -> {{100, 10}, {25, 10}}, 
            ImageSize -> {300, Automatic}, 
            Method -> {
             "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
              AbsolutePointSize[6], "ScalingFunctions" -> None, 
              "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                  (Identity[#]& )[
                   Part[#, 1]], 
                  (Identity[#]& )[
                   Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                  (Identity[#]& )[
                   Part[#, 1]], 
                  (Identity[#]& )[
                   Part[#, 2]]}& )}}, 
            PlotRange -> {{0, 11331.283692690682`}, {0., 
              12.570366266433215`}}, PlotRangeClipping -> True, 
            PlotRangePadding -> {{
               Scaled[0.02], 
               Scaled[0.02]}, {
               Scaled[0.02], 
               Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}]}}], 
       Grid[{{
          Dynamic[
           Graphics3D[{
             $CellContext`trace[$CellContext`time$$], $CellContext`earth1, 
             $CellContext`P1[$CellContext`time$$], 
             $CellContext`P2[$CellContext`time$$], 
             $CellContext`tether1[$CellContext`time$$], 
             $CellContext`tether2[$CellContext`time$$], 
             $CellContext`xaxis[$CellContext`time$$], 
             $CellContext`yaxis[$CellContext`time$$], 
             $CellContext`zaxis[$CellContext`time$$]}, Boxed -> False, 
            PlotRange -> 
            1.1 (Max[$CellContext`radius $CellContext`rfactor] + \
$CellContext`rp), ImageSize -> {600, 600}, ViewPoint -> {1.3, -2.4, 2}]]}}, 
        ItemSize -> Dynamic[Automatic]]}}], $CellContext`period$$ = 
    5665.641846345341, $CellContext`psi0$$ = 0, $CellContext`ranget$$ = 
    11331.283692690682`, $CellContext`switch$$ = 
    "Simplified View", $CellContext`time$$ = 
    3921.2781576709763`, $CellContext`\[Mu]$$ = 
    3.9877848*^14, $CellContext`\[Tau]$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Button[
       "Update", $CellContext`clicked = True; 
        If[$CellContext`clicked == False, $CellContext`output$$ = 
          "Set data and select view, then click 'Update' to view animation", \
$CellContext`output$$ = "Updating..."]; 
        FinishDynamic[]; $CellContext`psiQ = $CellContext`\[Tau]$$ Cos[
            $CellContext`\[Alpha][$CellContext`t]] Cos[
            $CellContext`\[Gamma][$CellContext`t]]; $CellContext`alphaQ = \
$CellContext`\[Tau]$$ Sin[
            $CellContext`\[Gamma][$CellContext`t]]; $CellContext`period$$ = 
         2 Pi Sqrt[$CellContext`a$$^3/$CellContext`\[Mu]$$]; 
        If[$CellContext`time$$ > $CellContext`ranget$$, $CellContext`ranget$$ = \
$CellContext`time$$]; $CellContext`alphadsh0 = 0; $CellContext`psidsh0 = 
         0; $CellContext`r0 = $CellContext`a$$ (
           1 - $CellContext`e$$); $CellContext`rdsh0 = 0; $CellContext`theta0 = 
         0; $CellContext`thetadsh0 = (1/$CellContext`r0) 
          Sqrt[$CellContext`\[Mu]$$ (1 + $CellContext`e$$)/($CellContext`a$$ (
             1 - $CellContext`e$$))]; $CellContext`rm[$CellContext`t] = \
{{$CellContext`rc[$CellContext`t] Cos[
              $CellContext`\[Theta][$CellContext`t]]}, \
{$CellContext`rc[$CellContext`t] Sin[
              $CellContext`\[Theta][$CellContext`t]]}, {
           0}}; $CellContext`rp1[$CellContext`t] = \
$CellContext`rm[$CellContext`t] + {{$CellContext`l$$ Cos[
               $CellContext`\[Alpha][$CellContext`t]] 
             Cos[$CellContext`\[Psi][$CellContext`t] + \
$CellContext`\[Theta][$CellContext`t]]}, {$CellContext`l$$ Cos[
               $CellContext`\[Alpha][$CellContext`t]] 
             Sin[$CellContext`\[Psi][$CellContext`t] + \
$CellContext`\[Theta][$CellContext`t]]}, {$CellContext`l$$ Sin[
               $CellContext`\[Alpha][$CellContext`t]]}}; \
$CellContext`rp2[$CellContext`t] = $CellContext`rm[$CellContext`t] - \
{{$CellContext`l$$ Cos[
              $CellContext`\[Alpha][$CellContext`t]] 
            Cos[$CellContext`\[Psi][$CellContext`t] + \
$CellContext`\[Theta][$CellContext`t]]}, {$CellContext`l$$ Cos[
              $CellContext`\[Alpha][$CellContext`t]] 
            Sin[$CellContext`\[Psi][$CellContext`t] + \
$CellContext`\[Theta][$CellContext`t]]}, {$CellContext`l$$ Sin[
              $CellContext`\[Alpha][$CellContext`t]]}}; 
        Subscript[$CellContext`T, $CellContext`lin] = (1/2) (
           2 $CellContext`Mp$$) (
           Derivative[
             1][$CellContext`rc][$CellContext`t]^2 + \
$CellContext`rc[$CellContext`t]^2 
            Derivative[
              1][$CellContext`\[Theta]][$CellContext`t]^2); $CellContext`\
\[Omega][$CellContext`t] = {{
           Derivative[
             1][$CellContext`\[Gamma]][$CellContext`t] + (
              Derivative[1][$CellContext`\[Theta]][$CellContext`t] + 
              Derivative[1][$CellContext`\[Psi]][$CellContext`t]) Sin[
               $CellContext`\[Alpha][$CellContext`t]]}, {(-Cos[
                $CellContext`\[Gamma][$CellContext`t]]) 
             Derivative[1][$CellContext`\[Alpha]][$CellContext`t] + Cos[
               $CellContext`\[Alpha][$CellContext`t]] Sin[
               $CellContext`\[Gamma][$CellContext`t]] (
              Derivative[1][$CellContext`\[Theta]][$CellContext`t] + 
              Derivative[1][$CellContext`\[Psi]][$CellContext`t])}, {Sin[
               $CellContext`\[Gamma][$CellContext`t]] 
             Derivative[1][$CellContext`\[Alpha]][$CellContext`t] + Cos[
               $CellContext`\[Alpha][$CellContext`t]] Cos[
               $CellContext`\[Gamma][$CellContext`t]] (
              Derivative[1][$CellContext`\[Theta]][$CellContext`t] + 
              Derivative[1][$CellContext`\[Psi]][$CellContext`t])}}; 
        Subscript[
          I, 123] = {{0, 0, 0}, {
           0, 2 $CellContext`Mp$$ $CellContext`l$$^2, 0}, {
           0, 0, 2 $CellContext`Mp$$ $CellContext`l$$^2}}; 
        Subscript[$CellContext`T, $CellContext`rot] = (1/2) Dot[
            Transpose[
             $CellContext`\[Omega][$CellContext`t]], 
            Subscript[I, 123], 
            $CellContext`\[Omega][$CellContext`t]]; $CellContext`T = 
         Subscript[$CellContext`T, $CellContext`lin] + 
          Subscript[$CellContext`T, $CellContext`rot]; 
        Subscript[$CellContext`U, $CellContext`p1] = -($CellContext`\[Mu]$$ \
$CellContext`Mp$$/Sqrt[
            Dot[
             Transpose[
              $CellContext`rp1[$CellContext`t]], 
             $CellContext`rp1[$CellContext`t]]]); 
        Subscript[$CellContext`U, $CellContext`p2] = -($CellContext`\[Mu]$$ \
$CellContext`Mp$$/Sqrt[
            Dot[
             Transpose[
              $CellContext`rp2[$CellContext`t]], 
             $CellContext`rp2[$CellContext`t]]]); $CellContext`V = 
         Subscript[$CellContext`U, $CellContext`p1] + 
          Subscript[$CellContext`U, $CellContext`p2]; $CellContext`L = \
$CellContext`T - $CellContext`V; $CellContext`eqn1 = Simplify[D[
             D[$CellContext`L, 
              Derivative[
              1][$CellContext`\[Psi]][$CellContext`t]], $CellContext`t] - 
           D[$CellContext`L, 
            $CellContext`\[Psi][$CellContext`t]] - $CellContext`psiQ]; \
$CellContext`eqn2 = Simplify[D[
             D[$CellContext`L, 
              Derivative[
              1][$CellContext`\[Alpha]][$CellContext`t]], $CellContext`t] - 
           D[$CellContext`L, 
            $CellContext`\[Alpha][$CellContext`t]] - $CellContext`alphaQ]; \
$CellContext`eqn3 = Simplify[D[
             D[$CellContext`L, 
              Derivative[
              1][$CellContext`\[Theta]][$CellContext`t]], $CellContext`t] - 
           D[$CellContext`L, 
            $CellContext`\[Theta][$CellContext`t]]]; $CellContext`eqn4 = 
         Simplify[D[
             D[$CellContext`L, 
              Derivative[
              1][$CellContext`rc][$CellContext`t]], $CellContext`t] - 
           D[$CellContext`L, 
            $CellContext`rc[$CellContext`t]]]; $CellContext`eqn5 = Cos[
             $CellContext`\[Alpha][$CellContext`t]] 
           Derivative[1][$CellContext`\[Alpha]][$CellContext`t] (
            Derivative[1][$CellContext`\[Theta]][$CellContext`t] + 
            Derivative[1][$CellContext`\[Psi]][$CellContext`t]) + 
          Derivative[2][$CellContext`\[Gamma]][$CellContext`t] + Sin[
             $CellContext`\[Alpha][$CellContext`t]] (
            Derivative[2][$CellContext`\[Theta]][$CellContext`t] + 
            Derivative[
             2][$CellContext`\[Psi]][$CellContext`t]); $CellContext`system = 
         NDSolve[{$CellContext`eqn1 == 0, $CellContext`eqn2 == 
            0, $CellContext`eqn3 == 0, $CellContext`eqn4 == 
            0, $CellContext`eqn5 == 
            0, $CellContext`\[Alpha][0] == $CellContext`alpha0$$, 
            Derivative[1][$CellContext`\[Alpha]][
             0] == $CellContext`alphadsh0, $CellContext`\[Psi][
             0] == $CellContext`psi0$$, 
            Derivative[1][$CellContext`\[Psi]][
             0] == $CellContext`psidsh0, $CellContext`\[Theta][
             0] == $CellContext`theta0, 
            Derivative[1][$CellContext`\[Theta]][
             0] == $CellContext`thetadsh0, $CellContext`rc[
             0] == $CellContext`r0, Derivative[1][$CellContext`rc][0] == 
            0, $CellContext`\[Gamma][0] == $CellContext`gamma0$$, 
            Derivative[1][$CellContext`\[Gamma]][0] == 
            0}, {$CellContext`\[Psi], $CellContext`\[Alpha], $CellContext`\
\[Theta], $CellContext`rc, $CellContext`\[Gamma]}, {$CellContext`t, 
            0, $CellContext`ranget$$}, MaxSteps -> Infinity, AccuracyGoal -> 
           Automatic, PrecisionGoal -> 10]; $CellContext`gammas[
           Pattern[$CellContext`t, 
            Blank[]]] := Evaluate[
           ReplaceAll[
            $CellContext`\[Gamma][$CellContext`t], 
            Part[$CellContext`system, 1]]]; $CellContext`psis[
           Pattern[$CellContext`t, 
            Blank[]]] := ReplaceAll[
           $CellContext`\[Psi][$CellContext`t], 
           Part[$CellContext`system, 1]]; $CellContext`alphas[
           Pattern[$CellContext`t, 
            Blank[]]] := ReplaceAll[
           $CellContext`\[Alpha][$CellContext`t], 
           Part[$CellContext`system, 1]]; $CellContext`thetas[
           Pattern[$CellContext`t, 
            Blank[]]] := ReplaceAll[
           $CellContext`\[Theta][$CellContext`t], 
           Part[$CellContext`system, 1]]; $CellContext`rs[
           Pattern[$CellContext`t, 
            Blank[]]] := ReplaceAll[
           $CellContext`rc[$CellContext`t], 
           Part[$CellContext`system, 1]]; $CellContext`radius = Table[
           Evaluate[
            $CellContext`rs[$CellContext`t]], {$CellContext`t, 
            0, $CellContext`ranget$$, $CellContext`ranget$$/
            100000}]; $CellContext`rcc[
           Pattern[$CellContext`t, 
            Blank[]]] := $CellContext`rs[$CellContext`t]; $CellContext`RC1[
           Pattern[$CellContext`t, 
            Blank[]]] := {$CellContext`rcc[$CellContext`t] Cos[
             $CellContext`thetas[$CellContext`t]], \
$CellContext`rcc[$CellContext`t] Sin[
             $CellContext`thetas[$CellContext`t]], 0}; $CellContext`trace1[
           Pattern[$CellContext`t$, 
            Blank[]]] := {Blue, 
           Line[
            Table[
             $CellContext`RC1[$CellContext`i], {$CellContext`i, 
              
              If[$CellContext`t$ + $CellContext`period$$/
                 4 > $CellContext`period$$, 
               
               Round[$CellContext`t$ - $CellContext`period$$ + \
$CellContext`period$$/4], 1], $CellContext`t$, 100}]]}; $CellContext`point1[
           Pattern[$CellContext`t, 
            Blank[]]] := {Red, 
           Point[
            $CellContext`RC1[$CellContext`t]]}; $CellContext`rfactor = 
         35/Min[$CellContext`radius]; $CellContext`earth1 = {White, 
           Sphere[{0, 0, 0}, 10]}; $CellContext`rp = 
         If[(10/50000) $CellContext`l$$ < 30, (10/50000) $CellContext`l$$, 
           30]; $CellContext`rcc1[
           Pattern[$CellContext`t, 
            
            Blank[]]] := $CellContext`rfactor $CellContext`rs[$CellContext`t]; \
$CellContext`RC[
           Pattern[$CellContext`t, 
            Blank[]]] := {$CellContext`rcc1[$CellContext`t] Cos[
             $CellContext`thetas[$CellContext`t]], \
$CellContext`rcc1[$CellContext`t] Sin[
             $CellContext`thetas[$CellContext`t]], 0}; $CellContext`trace[
           Pattern[$CellContext`t$, 
            Blank[]]] := {Blue, 
           Line[
            Table[
             $CellContext`RC[$CellContext`i], {$CellContext`i, 
              
              If[$CellContext`t$ + $CellContext`period$$/
                 4 > $CellContext`period$$, 
               
               Round[$CellContext`t$ - $CellContext`period$$ + \
$CellContext`period$$/4], 1], $CellContext`t$, 100}]]}; $CellContext`point[
           Pattern[$CellContext`t, 
            Blank[]]] := {Red, 
           Point[
            $CellContext`RC[$CellContext`t]]}; $CellContext`RP1[
           Pattern[$CellContext`t, 
            Blank[]]] := $CellContext`RC[$CellContext`t] + {$CellContext`rp 
            Cos[
              $CellContext`alphas[$CellContext`t]] 
            Cos[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`rp Cos[
              $CellContext`alphas[$CellContext`t]] 
            Sin[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`rp Sin[
              $CellContext`alphas[$CellContext`t]]}; $CellContext`RP2[
           Pattern[$CellContext`t, 
            Blank[]]] := $CellContext`RC[$CellContext`t] - {$CellContext`rp 
           Cos[
             $CellContext`alphas[$CellContext`t]] 
           Cos[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`rp Cos[
             $CellContext`alphas[$CellContext`t]] 
           Sin[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`rp Sin[
             $CellContext`alphas[$CellContext`t]]}; $CellContext`P1[
           Pattern[$CellContext`t, 
            Blank[]]] := {Gray, 
           Sphere[
            $CellContext`RP1[$CellContext`t], 1]}; $CellContext`P2[
           Pattern[$CellContext`t, 
            Blank[]]] := {Gray, 
           Sphere[
            $CellContext`RP2[$CellContext`t], 1]}; $CellContext`tether1[
           Pattern[$CellContext`t, 
            Blank[]]] := {Black, 
           Cylinder[{
             $CellContext`RC[$CellContext`t], 
             $CellContext`RP2[$CellContext`t]}, 0.3]}; $CellContext`tether2[
           Pattern[$CellContext`t, 
            Blank[]]] := {White, 
           Cylinder[{
             $CellContext`RC[$CellContext`t], 
             $CellContext`RP1[$CellContext`t]}, 0.3]}; $CellContext`xaxis[
           Pattern[$CellContext`t, 
            Blank[]]] := {Red, 
           Cylinder[{
             $CellContext`RC[$CellContext`t], $CellContext`RC[$CellContext`t] + 
             15 Normalize[
                $CellContext`RC[$CellContext`t]]}, 0.1]}; $CellContext`yaxis[
           Pattern[$CellContext`t, 
            Blank[]]] := {Green, 
           Cylinder[{
             $CellContext`RC[$CellContext`t], $CellContext`RC[$CellContext`t] + 
             15 Normalize[{-Part[
                   $CellContext`RC[$CellContext`t], 2], 
                 Part[
                  $CellContext`RC[$CellContext`t], 1], 0}]}, 
            0.1]}; $CellContext`zaxis[
           Pattern[$CellContext`t, 
            Blank[]]] := {Blue, 
           Cylinder[{
             $CellContext`RC[$CellContext`t], $CellContext`RC[$CellContext`t] + 
             15 {0, 0, 1}}, 0.1]}; $CellContext`RP11[
           Pattern[$CellContext`t, 
            Blank[]]] := {$CellContext`rp Cos[
             $CellContext`alphas[$CellContext`t]] Cos[
             $CellContext`psis[$CellContext`t]], $CellContext`rp Cos[
             $CellContext`alphas[$CellContext`t]] Sin[
             $CellContext`psis[$CellContext`t]], $CellContext`rp Sin[
             $CellContext`alphas[$CellContext`t]]}; $CellContext`RP21[
           Pattern[$CellContext`t, 
            Blank[]]] := -{$CellContext`rp Cos[
              $CellContext`alphas[$CellContext`t]] Cos[
              $CellContext`psis[$CellContext`t]], $CellContext`rp Cos[
              $CellContext`alphas[$CellContext`t]] Sin[
              $CellContext`psis[$CellContext`t]], $CellContext`rp Sin[
              $CellContext`alphas[$CellContext`t]]}; $CellContext`P11[
           Pattern[$CellContext`t, 
            Blank[]]] := {Gray, 
           Sphere[
            $CellContext`RP11[$CellContext`t], 1]}; $CellContext`P21[
           Pattern[$CellContext`t, 
            Blank[]]] := {Gray, 
           Sphere[
            $CellContext`RP21[$CellContext`t], 1]}; $CellContext`tether11[
           Pattern[$CellContext`t, 
            Blank[]]] := {Black, 
           Cylinder[{{0, 0, 0}, 
             $CellContext`RP21[$CellContext`t]}, 0.3]}; $CellContext`tether21[
           Pattern[$CellContext`t, 
            Blank[]]] := {White, 
           Cylinder[{{0, 0, 0}, 
             $CellContext`RP11[$CellContext`t]}, 
            0.3]}; $CellContext`xaxis2 := {Red, Thick, 
           InfiniteLine[{{-12, 0, 0}, {12, 0, 0}}]}; $CellContext`yaxis2 := {
          Black, Thick, 
           InfiniteLine[{{0, -12, 0}, {0, 12, 0}}]}; $CellContext`zaxis2 := {
          Black, Thick, 
           InfiniteLine[{{0, 0, -12}, {0, 0, 12}}]}; $CellContext`tracerange = 
         500; $CellContext`tracep1[
           Pattern[$CellContext`t, 
            Blank[]]] := {Red, 
           Line[
            Table[
             $CellContext`RP11[$CellContext`x], {$CellContext`x, 
              
              If[$CellContext`t - $CellContext`tracerange > 
               0, $CellContext`t - $CellContext`tracerange, 
               1], $CellContext`t, 10}]]}; $CellContext`tracep2[
           Pattern[$CellContext`t, 
            Blank[]]] := {Blue, 
           Line[
            Table[
             $CellContext`RP21[$CellContext`x], {$CellContext`x, 
              
              If[$CellContext`t - $CellContext`tracerange > 
               0, $CellContext`t - $CellContext`tracerange, 
               1], $CellContext`t, 10}]]}; Subscript[$CellContext`e$$, 1][
           Pattern[$CellContext`t, 
            Blank[]]] := $CellContext`RP11[$CellContext`t]; 
        Subscript[$CellContext`e$$, 2][
           Pattern[$CellContext`t$, 
            Blank[]]] := RotationTransform[
           $CellContext`gammas[$CellContext`t$], 
           Subscript[$CellContext`e$$, 1][$CellContext`t$]][{-Sin[
              $CellContext`psis[$CellContext`t$]], 
            Cos[
             $CellContext`psis[$CellContext`t$]], 0}]; 
        Subscript[$CellContext`e$$, 3][
           Pattern[$CellContext`t$, 
            Blank[]]] := Cross[
           Subscript[$CellContext`e$$, 1][$CellContext`t$], 
           
           Subscript[$CellContext`e$$, 
            2][$CellContext`t$]]; $CellContext`oneax[
           Pattern[$CellContext`t$, 
            Blank[]]] := {Green, Thick, 
           Line[{{0, 0, 0}, 20 Normalize[
               
               Subscript[$CellContext`e$$, 
                1][$CellContext`t$]]}]}; $CellContext`twoax[
           Pattern[$CellContext`t$, 
            Blank[]]] := {Green, Thick, 
           Line[{{0, 0, 0}, 20 Normalize[
               
               Subscript[$CellContext`e$$, 
                2][$CellContext`t$]]}]}; $CellContext`threeax[
           Pattern[$CellContext`t$, 
            Blank[]]] := {Purple, Thick, 
           Line[{{0, 0, 0}, 20 Normalize[
               Subscript[$CellContext`e$$, 
                3][$CellContext`t$]]}]}; $CellContext`alphaxy[
           Pattern[$CellContext`t, 
            Blank[]]] := {$CellContext`rp Cos[
             $CellContext`alphas[$CellContext`t]] Cos[
             $CellContext`psis[$CellContext`t]], $CellContext`rp Cos[
             $CellContext`alphas[$CellContext`t]] Sin[
             $CellContext`psis[$CellContext`t]], 0}; $CellContext`up[
           Pattern[$CellContext`t, 
            Blank[]]] := {Blue, Dashed, 
           Line[{{
              $CellContext`alphaxy[$CellContext`t], 
              $CellContext`RP11[$CellContext`t]}}]}; $CellContext`out[
           Pattern[$CellContext`t, 
            Blank[]]] := {Blue, Dashed, 
           Line[{{
              $CellContext`alphaxy[$CellContext`t], {0, 0, 
              0}}}]}; $CellContext`flat = {Blue, 
           Opacity[0.1], 
           
           InfinitePlane[{{0, 0, 0}, {1, 0, 0}, {0, 1, 
            0}}]}; $CellContext`tlength = 250000; $CellContext`RC3[
           Pattern[$CellContext`t, 
            Blank[]]] := {$CellContext`rs[$CellContext`t] Cos[
             $CellContext`thetas[$CellContext`t]], \
$CellContext`rs[$CellContext`t] Sin[
             $CellContext`thetas[$CellContext`t]], 0}; $CellContext`RP13[
           Pattern[$CellContext`t, 
            
            Blank[]]] := $CellContext`RC3[$CellContext`t] + \
{$CellContext`tlength Cos[
              $CellContext`alphas[$CellContext`t]] 
            Cos[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`tlength Cos[
              $CellContext`alphas[$CellContext`t]] 
            Sin[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`tlength Sin[
              $CellContext`alphas[$CellContext`t]]}; $CellContext`RP23[
           Pattern[$CellContext`t, 
            
            Blank[]]] := $CellContext`RC3[$CellContext`t] - \
{$CellContext`tlength Cos[
             $CellContext`alphas[$CellContext`t]] 
           Cos[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`tlength Cos[
             $CellContext`alphas[$CellContext`t]] 
           Sin[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`tlength Sin[
             $CellContext`alphas[$CellContext`t]]}; $CellContext`P13[
           Pattern[$CellContext`t, 
            Blank[]]] := {
           Darker[Gray], 
           Sphere[
            $CellContext`RP13[$CellContext`t], 20000]}; $CellContext`P23[
           Pattern[$CellContext`t, 
            Blank[]]] := {
           Darker[Gray], 
           Sphere[
            $CellContext`RP23[$CellContext`t], 20000]}; $CellContext`tether13[
           Pattern[$CellContext`t, 
            Blank[]]] := {Gray, Thick, 
           Line[{
             $CellContext`RC3[$CellContext`t], 
             $CellContext`RP23[$CellContext`t]}]}; $CellContext`tether23[
           Pattern[$CellContext`t, 
            Blank[]]] := {Gray, Thick, 
           Line[{
             $CellContext`RC3[$CellContext`t], 
             $CellContext`RP13[$CellContext`t]}]}; $CellContext`xaxis3[
           Pattern[$CellContext`t, 
            Blank[]]] := {Red, 
           Opacity[0.5], Thick, 
           Line[{
             $CellContext`RC3[$CellContext`t], 
             1.1 $CellContext`RC3[$CellContext`t]}]}; $CellContext`yaxis3[
           Pattern[$CellContext`t, 
            Blank[]]] := {Green, 
           Opacity[0.5], Thick, 
           Line[{
             $CellContext`RC3[$CellContext`t], \
$CellContext`RC3[$CellContext`t] + 0.1 {-Part[
                  $CellContext`RC3[$CellContext`t], 2], 
                Part[
                 $CellContext`RC3[$CellContext`t], 1], 
                0}}]}; $CellContext`zaxis3[
           Pattern[$CellContext`t, 
            Blank[]]] := {Blue, 
           Opacity[0.5], Thick, 
           Line[{
             $CellContext`RC3[$CellContext`t], \
$CellContext`RC3[$CellContext`t] + 0.1 Norm[
                $CellContext`RC3[$CellContext`t]] {0, 0, 
               1}}]}; $CellContext`tracerange = (4/
           5) $CellContext`period$$; $CellContext`tracep13[
           Pattern[$CellContext`t, 
            Blank[]]] := {Red, Thick, 
           Line[
            Table[
             $CellContext`RP13[$CellContext`x], {$CellContext`x, 
              
              If[$CellContext`t - $CellContext`tracerange > 
               0, $CellContext`t - $CellContext`tracerange, 
               1], $CellContext`t, 10}]]}; $CellContext`tracep23[
           Pattern[$CellContext`t, 
            Blank[]]] := {Blue, Thick, 
           Line[
            Table[
             $CellContext`RP23[$CellContext`x], {$CellContext`x, 
              
              If[$CellContext`t - $CellContext`tracerange > 
               0, $CellContext`t - $CellContext`tracerange, 
               1], $CellContext`t, 10}]]}; $CellContext`camerapoint[
           Pattern[$CellContext`t, 
            Blank[]]] := $CellContext`RC3[$CellContext`t] + 
          0.5 $CellContext`RC3[$CellContext`t] + {0, 2000000, 
           2000000}; $CellContext`imagePadding = {{100, 10}, {25, 
          10}}; $CellContext`graphicsgrid = Grid[{{
             If[$CellContext`switch$$ == "Earth Scale View", 
              Dynamic[
               Graphics3D[{
                 $CellContext`trace1[$CellContext`time$$], $CellContext`earth, 
                 $CellContext`point1[$CellContext`time$$]}, Boxed -> False, 
                PlotRange -> 
                Max[$CellContext`radius] + 0.1 Max[$CellContext`radius], 
                ImageSize -> {600, 600}, ViewPoint -> Above, ViewProjection -> 
                "Orthographic", Lighting -> {{"Ambient", White}}]], 
              If[$CellContext`switch$$ == "Simplified View", 
               Dynamic[
                Graphics3D[{
                  $CellContext`trace[$CellContext`time$$], \
$CellContext`earth1, 
                  $CellContext`P1[$CellContext`time$$], 
                  $CellContext`P2[$CellContext`time$$], 
                  $CellContext`tether1[$CellContext`time$$], 
                  $CellContext`tether2[$CellContext`time$$], 
                  $CellContext`xaxis[$CellContext`time$$], 
                  $CellContext`yaxis[$CellContext`time$$], 
                  $CellContext`zaxis[$CellContext`time$$]}, Boxed -> False, 
                 PlotRange -> 
                 1.1 (Max[$CellContext`radius $CellContext`rfactor] + \
$CellContext`rp), ImageSize -> {600, 600}, ViewPoint -> {1.3, -2.4, 2}]], 
               If[$CellContext`switch$$ == "Body Frame", 
                Dynamic[
                 Graphics3D[{$CellContext`flat, 
                   $CellContext`P11[$CellContext`time$$], 
                   $CellContext`P21[$CellContext`time$$], \
$CellContext`xaxis2, $CellContext`yaxis2, $CellContext`zaxis2, 
                   $CellContext`tether11[$CellContext`time$$], 
                   $CellContext`tether21[$CellContext`time$$], 
                   $CellContext`up[$CellContext`time$$], 
                   $CellContext`out[$CellContext`time$$], 
                   $CellContext`oneax[$CellContext`time$$], 
                   $CellContext`twoax[$CellContext`time$$], 
                   $CellContext`threeax[$CellContext`time$$], 
                   $CellContext`tracep1[$CellContext`time$$], 
                   $CellContext`tracep2[$CellContext`time$$]}, Boxed -> False,
                   ViewProjection -> "Perspective", PlotRange -> 20, 
                  ImageSize -> {600, 600}]], 
                Dynamic[
                 Graphics3D[{$CellContext`earth, 
                   $CellContext`P13[$CellContext`time$$], 
                   $CellContext`P23[$CellContext`time$$], 
                   $CellContext`tether13[$CellContext`time$$], 
                   $CellContext`tether23[$CellContext`time$$], 
                   $CellContext`xaxis3[$CellContext`time$$], 
                   $CellContext`yaxis3[$CellContext`time$$], 
                   $CellContext`zaxis3[$CellContext`time$$], 
                   $CellContext`tracep13[$CellContext`time$$], 
                   $CellContext`tracep23[$CellContext`time$$]}, Background -> 
                  Black, Boxed -> False, PlotRange -> 
                  Max[$CellContext`radius] + 0.1 Max[$CellContext`radius], 
                  ImageSize -> {900, 600}, ViewProjection -> "Perspective", 
                  ViewVector -> {
                    Evaluate[
                    $CellContext`camerapoint[$CellContext`time$$]], 
                    Evaluate[
                    $CellContext`RC3[$CellContext`time$$]]}, 
                  Lighting -> {"Point", White, {0, 0, 0}}]]]]]}}, ItemSize -> 
           Dynamic[Automatic]]; 
        If[$CellContext`switch$$ == 
          "Cinematic View", $CellContext`graphgrid = $CellContext`\
\[LetterSpace], $CellContext`graphgrid = Grid[{{
              Plot[
               Evaluate[
                ReplaceAll[
                 $CellContext`\[Psi][$CellContext`t], $CellContext`system]], \
{$CellContext`t, 0, $CellContext`ranget$$}, Frame -> True, FrameTicks -> 
               Automatic, GridLines -> Automatic, 
               ImageSize -> {300, Automatic}, 
               ImagePadding -> $CellContext`imagePadding, 
               FrameLabel -> {"time", "\[Psi][t]"}]}, {
              Plot[
               Evaluate[
                ReplaceAll[
                 $CellContext`\[Alpha][$CellContext`t], \
$CellContext`system]], {$CellContext`t, 0, $CellContext`ranget$$}, Frame -> 
               True, FrameTicks -> Automatic, GridLines -> Automatic, 
               ImageSize -> {300, Automatic}, 
               ImagePadding -> $CellContext`imagePadding, 
               FrameLabel -> {"time", "\[Alpha][t]"}]}, {
              Plot[
               Evaluate[
                ReplaceAll[
                 $CellContext`\[Gamma][$CellContext`t], \
$CellContext`system]], {$CellContext`t, 0, $CellContext`ranget$$}, Frame -> 
               True, FrameTicks -> Automatic, GridLines -> Automatic, 
               ImageSize -> {300, Automatic}, 
               ImagePadding -> $CellContext`imagePadding, 
               FrameLabel -> {"time", "\[Gamma][t]"}]}, {
              Plot[
               Evaluate[
                ReplaceAll[
                 $CellContext`rc[$CellContext`t], $CellContext`system]], \
{$CellContext`t, 0, $CellContext`ranget$$}, Frame -> True, FrameTicks -> 
               Automatic, GridLines -> Automatic, 
               ImageSize -> {300, Automatic}, 
               ImagePadding -> $CellContext`imagePadding, 
               FrameLabel -> {"time", "r[t]"}]}, {
              Plot[
               Evaluate[
                ReplaceAll[
                 $CellContext`\[Theta][$CellContext`t], \
$CellContext`system]], {$CellContext`t, 0, $CellContext`ranget$$}, Frame -> 
               True, FrameTicks -> Automatic, GridLines -> Automatic, 
               ImageSize -> {300, Automatic}, 
               ImagePadding -> $CellContext`imagePadding, 
               FrameLabel -> {
                "time", "\[Theta][t]"}]}}]]; $CellContext`output$$ = 
         Grid[{{$CellContext`graphgrid, $CellContext`graphicsgrid}}], Method -> 
        "Queued"]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`switch$$], "Simplified View", "3D view:"}, {
      "Earth Scale View", "Simplified View", "Body Frame", 
       "Cinematic View"}}, {
      Hold["System Data"], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`\[Mu]$$], 3.9877848*^14, 
       "Gravitational Parameter"}}, {{
       Hold[$CellContext`Mp$$], 1000, "Payload Mass (kg)"}}, {{
       Hold[$CellContext`a$$], 6870000, "Semimajor Axis"}, 6870000, 
      50900000}, {{
       Hold[$CellContext`period$$], 5665.641846345341, "Period"}}, {{
       Hold[$CellContext`e$$], 0, "Eccentricity"}, 0, 0.99}, {{
       Hold[$CellContext`\[Tau]$$], 0, "Motor Torque"}, -20000000, 
      20000000}, {{
       Hold[$CellContext`l$$], 50000, "Tether Length (m)"}, 100, 100000}, {{
       Hold[$CellContext`ranget$$], 11331.283692690682`, "Maximum Time"}, 
      1000, 
      Dynamic[$CellContext`period$$ 20]}, {
      Hold["\n"], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`time$$], 1, "Time"}, 1, 
      Dynamic[$CellContext`ranget$$]}, {
      Hold["\nInitial Conditions"], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`psi0$$], 0, "Yaw Angle, \[Psi]"}, (-2) Pi, 2 Pi}, {{
       Hold[$CellContext`alpha0$$], 0, "Pitch Angle, \[Alpha]"}, (-2) Pi, 2 
      Pi}, {{
       Hold[$CellContext`gamma0$$], 0, "Roll Angle, \[Gamma]"}, (-2) Pi, 2 
      Pi}, {
      Hold[$CellContext`output$$]}, {
      Hold[
      "\n \n \n\nPreview animation pre-evaluates each frame of a simulation \
and displays it, \nso it can create smoother animations than the default \
animations shown, but \na large number of frames may cause a crash. To save \
an animation after a\npreview is created, uncomment the 'Export' cell below \
to save as an avi. \nFiles are ~1mb per frame so again a large number of \
frames (>100) will take\na long time or may cause the program to crash"], 
      Manipulate`Dump`ThisIsNotAControl}, {
      Hold[
       Button["Preview Animation", FinishDynamic[]; $CellContext`makeframes[
           Pattern[$CellContext`ttime$, 
            Blank[]]] := If[$CellContext`switch$$ == "Earth Scale View", 
           Dynamic[
            Graphics3D[{
              $CellContext`trace1[$CellContext`ttime$], $CellContext`earth, 
              $CellContext`point1[$CellContext`ttime$]}, Boxed -> False, 
             PlotRange -> 
             Max[$CellContext`radius] + 0.1 Max[$CellContext`radius], 
             ImageSize -> {600, 600}, ViewPoint -> Above, ViewProjection -> 
             "Orthographic", Lighting -> {{"Ambient", White}}]], 
           If[$CellContext`switch$$ == "Simplified View", 
            Dynamic[
             Graphics3D[{
               $CellContext`trace[$CellContext`ttime$], $CellContext`earth1, 
               $CellContext`P1[$CellContext`ttime$], 
               $CellContext`P2[$CellContext`ttime$], 
               $CellContext`tether1[$CellContext`ttime$], 
               $CellContext`tether2[$CellContext`ttime$], 
               $CellContext`xaxis[$CellContext`ttime$], 
               $CellContext`yaxis[$CellContext`ttime$], 
               $CellContext`zaxis[$CellContext`ttime$]}, Boxed -> False, 
              PlotRange -> 
              1.1 (Max[$CellContext`radius $CellContext`rfactor] + \
$CellContext`rp), ImageSize -> {600, 600}, ViewPoint -> {1.3, -2.4, 2}]], 
            If[$CellContext`switch$$ == "Body Frame", 
             Dynamic[
              Graphics3D[{$CellContext`flat, 
                $CellContext`P11[$CellContext`ttime$], 
                $CellContext`P21[$CellContext`ttime$], $CellContext`xaxis2, \
$CellContext`yaxis2, $CellContext`zaxis2, 
                $CellContext`tether11[$CellContext`ttime$], 
                $CellContext`tether21[$CellContext`ttime$], 
                $CellContext`up[$CellContext`ttime$], 
                $CellContext`out[$CellContext`ttime$], 
                $CellContext`oneax[$CellContext`ttime$], 
                $CellContext`twoax[$CellContext`ttime$], 
                $CellContext`threeax[$CellContext`ttime$], 
                $CellContext`tracep1[$CellContext`ttime$], 
                $CellContext`tracep2[$CellContext`ttime$]}, Boxed -> False, 
               ViewProjection -> "Perspective", PlotRange -> 20, 
               ImageSize -> {600, 600}]], 
             Dynamic[
              Graphics3D[{$CellContext`earth, 
                $CellContext`P13[$CellContext`ttime$], 
                $CellContext`P23[$CellContext`ttime$], 
                $CellContext`tether13[$CellContext`ttime$], 
                $CellContext`tether23[$CellContext`ttime$], 
                $CellContext`xaxis3[$CellContext`ttime$], 
                $CellContext`yaxis3[$CellContext`ttime$], 
                $CellContext`zaxis3[$CellContext`ttime$], 
                $CellContext`tracep13[$CellContext`ttime$], 
                $CellContext`tracep23[$CellContext`ttime$]}, Background -> 
               Black, Boxed -> False, PlotRange -> 
               Max[$CellContext`radius] + 0.1 Max[$CellContext`radius], 
               ImageSize -> {900, 600}, ViewProjection -> "Perspective", 
               ViewVector -> {
                 Evaluate[
                  $CellContext`camerapoint[$CellContext`ttime$]], 
                 Evaluate[
                  $CellContext`RC3[$CellContext`ttime$]]}, 
               Lighting -> {"Point", White, {0, 0, 0}}]]]]]; 
        Do[$CellContext`frames = Table[
            $CellContext`makeframes[$CellContext`zzz], {$CellContext`zzz, \
$CellContext`animationstart$$, $CellContext`animationend$$, \
($CellContext`animationend$$ - \
$CellContext`animationstart$$)/$CellContext`noframes$$}], 
          1]; $CellContext`output$$ = 
         ListAnimate[$CellContext`frames, AnimationRunning -> True], Method -> 
        "Queued"]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`framerate$$], 1, "Frame Rate"}, {1, 2, 3, 5, 10, 15, 
      30, 60}}, {{
       Hold[$CellContext`noframes$$], 10, "Number of Frames"}, 1, 1000}, {{
       Hold[$CellContext`animationstart$$], 0, "Animation Start Time"}, 0, 
      Dynamic[$CellContext`animationend$$]}, {{
       Hold[$CellContext`animationend$$], 10, "Animation End Time"}, 
      Dynamic[$CellContext`animationstart$$ + 1], 
      Dynamic[$CellContext`ranget$$]}}, Typeset`size$$ = {818., {350., 356.}},
     Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`switch$2403$$ = 0, $CellContext`a$2404$$ = 
    0, $CellContext`e$2405$$ = 0, $CellContext`\[Tau]$2406$$ = 
    0, $CellContext`l$2407$$ = 0, $CellContext`ranget$2408$$ = 
    0, $CellContext`time$2409$$ = 0, $CellContext`psi0$2410$$ = 
    0, $CellContext`alpha0$2411$$ = 0, $CellContext`gamma0$2412$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`a$$ = 6870000, $CellContext`alpha0$$ = 
        0, $CellContext`animationend$$ = 10, $CellContext`animationstart$$ = 
        0, $CellContext`e$$ = 0, $CellContext`framerate$$ = 
        1, $CellContext`gamma0$$ = 0, $CellContext`l$$ = 
        50000, $CellContext`Mp$$ = 1000, $CellContext`noframes$$ = 
        10, $CellContext`output$$ = 
        Null, $CellContext`period$$ = $CellContext`period$$, \
$CellContext`psi0$$ = 0, $CellContext`ranget$$ = 
        2 $CellContext`period$$, $CellContext`switch$$ = 
        "Simplified View", $CellContext`time$$ = 1, $CellContext`\[Mu]$$ = 
        3.9877848*^14, $CellContext`\[Tau]$$ = 0}, "ControllerVariables" :> {
        Hold[$CellContext`switch$$, $CellContext`switch$2403$$, 0], 
        Hold[$CellContext`a$$, $CellContext`a$2404$$, 0], 
        Hold[$CellContext`e$$, $CellContext`e$2405$$, 0], 
        Hold[$CellContext`\[Tau]$$, $CellContext`\[Tau]$2406$$, 0], 
        Hold[$CellContext`l$$, $CellContext`l$2407$$, 0], 
        Hold[$CellContext`ranget$$, $CellContext`ranget$2408$$, 0], 
        Hold[$CellContext`time$$, $CellContext`time$2409$$, 0], 
        Hold[$CellContext`psi0$$, $CellContext`psi0$2410$$, 0], 
        Hold[$CellContext`alpha0$$, $CellContext`alpha0$2411$$, 0], 
        Hold[$CellContext`gamma0$$, $CellContext`gamma0$2412$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`image = Image[CompressedData["
1:eJzsvUuu9TqsJnaT6qSZGWxkFtVNM90KMoAq+KaQzg1wK0CQWex2eh7QanlA
q86y9SApUiL18GNtfcA5/162RFEkP71t/y//5f/+T//n//gv//Iv/+1/+ud/
/+k//7//67//+3/+//73//mfH//Hv/23/+u//tu/Lv/bv/0///pf//Xf/+N/
+Q//XPz89/of/uVf/v9//nhPTExMTExMTExMTExMTExMTExMTExMTExMTExM
TExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTPxpbA4D
RUf59PfExITDlsW5ZY8tbWLijigFPsfLZTRXHspMVtfnqD9xHyhCn+HIKVx5
DjejWZZ/4P4NGi8/P/uPe9dh4j6AMY//5tOdHVmwi16uZShbrtfoZ8eyHbzc
mblA/Dgsey3OV37iAUCRwY1SPwli/N8jjo7RM89LT4sTVCAXdsYtkY/+9343
0pHBztDBCk88GRlmXq0aQabDdNFu1djQA5PCfSd+MNH/vRwdok+TI2aAVKDv
Z2cX+3fBEvOOkDVbajrNwCZFbeNQ2ikCRqm+J6fjVB0zf4KAQzKfoqzfMYe9
re8mavAUZsprTmQ4u2X45mkEaKEqOY6kY3/5+fdHHJVqialCXrvF9a139t2E
HY8hpogFxa887TwYRTosVQmemceUMnBzEaeL2UlmBTJOiatP//ytqs3EQ/B0
ZvJDwB8w8TyYxKZRUROvs37YCOaVJpXqIbQDsPtvMeLEHVFmpp9Hna8b1SO5
kOucjjVmkZQuoNkKk1K8Zfwfuf5SP8Wsh9cD13bi21BgJgj/S/tUpuzq0PYr
OMIiUFISvJBvp4RlnBNwlmMeOK56KnLMxHF2Zcd5qAaL7xLOHDOLscfc3Vsv
35v20KyqNq1GVmAvaI6dzwEkJeoc3tT1cZ51evdJG44+fRPbZ5rqBofL6MyP
n4l20VNZm8EeASWNLWjigOMkuqRq+LU7gp2U3MBW/ruo3D9xqqqBcOpOqdVC
pIUTB5uQZiTGOmNOa89BMoJFtrYE0ykHVai2RQU//FDpLhSn04rswiz+3Gwm
0Sj8U+EFnazsDDKxGVLGBPukMrxtC6YTuBk0Pf5XClLtQBJ3MlssbPHnCuIy
bFiUXX7cmJ4tFx4Y2oWdMu9cPCtzi3lNDiAFzoWgQUi7zJqzZSEsuL6iv76+
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
SUrMPMNrj0Qn0/wRZsJTeV2WZq3MfBc7TcxMJEX2iGYbRcFM/sDBJGYVlk7v
FfsTzKw6L1t63jl7k9D2eFNXVIctLhkhR2rKNVM8XFZk5rbAabgq4wlOey56
nQhIPdlF7J1QNYLtyczdrkGdPDNxb3v8I1etTM0SMxfCzKDB5GUlehkoXZKz
a3Jvb9U9YpLPU8HMaCI2j3y0PPtVGDMzQ0ZITS0zxzlp81qNK+JpSHex7BLu
zcy6I3m9mAmGh1EhJk8lM4sn3nXM3BJicswc6SSnk2WW9h6jyl2wpVvKTKqi
b25NzXdmBUhayqHJhOtpPgJg2KAQ09HxWQ59C7bd2Mdt4WCVp9Zx2yWi20ru
LSkxJSqx89nqxZmHvMH8j8N7BrhUSnXvrlFGX2YWqNmTme5n6cDBkp1tin0e
ZmaoHeo0Y0psT+XLorTYG5Bjp+CZITYCzjH5TvOM8cw4iCtAwvDxuCf8lGSV
kX1jQcrM8Ktk9TwzYc/JZETY3Kg65owpsTnj+436YC/gKL+f0IeD8WvGhZeo
2Ap2CUgcPvr7wk8pfRlLrtOsJeZy9F+Z5+D9ST/Gewwz/cNy5JADzBsV7eEc
b5DP//fCnxljQ0D7zGSkEkc9z7Qae77UykxhiGpBjpqJaP+rVLO3e426XKj7
h3MeZiWab8otQlC1YzRsR0UnMzESv2I3wlb1OiUbwG8gtjCzlppRJaoTz8zC
iNF/ZrIw09zEQ37seLbAzJigwSWM0P3fvj3x80Edi7n4jczEr9PiYjnPzEp2
yp0my8zSSmVYIvrHMYWC8+9KwOPZRFmIET1mPNP2+bRaT7lPx7czk5vWQTpw
sVzHzAJf5afBeGYWnjWBvZfPJBRcZOYWF4tSZQHesNBuiGtNczgLASaScVbC
4Go9K1EazWbJRBM39Jg42t16i1xOaVjnT+580sXVm0S5rN9SH+fzBVouSEia
rHpMqqj4HwL1jEDMIcw8wRH5d9ZpCHUWM7d3WPzVVIswk1Uu7zYrM38O6fgW
y8zaPvVTQF3Ob8QSHLEwvhrNzOHUNL8RMgHDzDpyJsuzSZ/pHsvU1Mrr4YVR
1RRuk5kp5WQup+k+26KV1JzMBEARczYzx8/5O3wmhGdm3zUg1WNfsFpx7Bpo
zhCzaJwcM3UeZzdKa3vNOZr18Fti4ffZ1PwZfVaynZgdmZl9TpMbKmaqFfTw
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
c3T4TAxG7aPyN8FVyivGfhePZseHzsR4PHbeuVx1ckKz/nCFXtubfehl4rl4
Zte5R+A1ipeXMu+m0MRT8UBy2t9EhLM28Ke4b3AyMycxvxm3puYn9JB+lBtK
GVy1A+JTmFxu+OzXjfrMqzcXJ4bjzqfd3YN/8M3oifrFh2wtIUwkgdnbfqfY
RZ1mS0OdJh4HNyy8MTORtqU1DoGhxmd2wwsO0zdZlrupK+wy8X2491ModaO1
JdlTMc7FjgfwKxc6TzHMXIT9bty6r2yIvY3sB506Hxtvmbnm892429zS63W8
QbdLDTf/Mo4e0gzlDrRSzWcnJ56EO9GSruk8f8N81Fhk9pbfjjud/fnSp3qG
cHPuknw77jCS9fuIV9tiFAYY7GttNeHRPWpk+CJjL/33IqzLStv3tmETEe1x
okYoc0ZWy0jlat0nTsGJ58euruq9gA2/byWrvmn85xu1v4KxzPzq2WMrgpU2
90G4t2jHPzjs//Pgn22MjEJn3N7ubZ9JYvFNUDOeZByGdZRL3nMOZqSzdfub
AN+BKSXSigRMnpCR+cLpATrkmASdaMZs5icmJiYmJiYmJiYmJiYmJiYmJiYm
JiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYm
JiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYm
JiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYm
JiYmJiYmJiYmJiYmJiYmJiYmJiYcXg4DRUf59PfExITDK4tzyx5b2sTEHVEK
fI6X62iuPJSZrK7PUX/iPlCEPsORU7jyHG5Gs6z/wP0bNF5/f/cf967DxH0A
Yx7/zac7O7JgF71ey1C2XK/R7471dfByZ+YK8euw7rU4X/mJBwBFBjdK/SSI
8X+PODpGzzwvPS1OUIFc2Bm3Rj763/vdSEcGO0MHKzzxZGSYebVqBJkO00W7
VWNDD0wK9534wUT/93p0iD5NjpgBUoG+n51d7N8FS8w7QtZsrek0A5sUtY1D
aacIGKX6npyOU3XM/A0CDsl8irJ+xxz2tr6bqMFTmCmvOZHh7CvDN08jQAtV
yXEkHfvLz7+/4qhUS0wV8tqtrm+9s+8m7HgMMUWsKH7laefBKNJhqUrwzDym
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
YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh
YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh
YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh
YcFisxiYdciffl5YWLDYsri27LGlLSzMiJLjc7w0o7nyUGaysj5H/IV5IHB9
hiOXcOU53AxqMf/D/uslNp/P8WHuOizMA+jz+G/+uas9C3bR5l6GsuU6iT4H
zHby8mCmgfhYmKMW1wu/8AAgz+Ci1O8Dwf/n8KMzeuZ56WhxgQjki4NxJvDR
fT5+DXRkcDB0sMALT0aGmXeLRpDpMK23ayVW9MCkcNeJn0x0f5uzQ3TP5Ijp
kSrQ9bOri/27YIk5I9KSmZpO07NJUNsQSltBQJTqenIap8qY+fEZnDnzT5Tl
O8ew09puoQZPYWZ6zomEs1uGb45GgBaikkMkHfrL77+fZFQqJaYIeemM7Vtn
tt2CHo8hZhIG+W962HkyinRYohIcM88hpeemSQ4Xs4PMCmSMEmaf/v9bVJuF
h+DpzORDwA8YeJ5MYp8RURPPs37ZCMaVKpHqkWgHYPffosSFGVFmphtHXS8b
lSP6Itc5nXPMSVJah2YrTEpxmnF/5PpL+RCzHk4OXNuFX0OBmcD9b+1TmbKr
XdvN4CQmgaKS4Bf5dioxjXMBrjLMA+OqpyLHTOxnd3acp2iw+C7uzDGz6HvM
r0fr5XrTHpJV1aZVyQIcBa3Y+RpAUqLOIXL+MM66vPukDUefvontM1V1g+Ey
2vPjRqJd5BTWZrBFQEljC1o4YTmJvhI1/NIVwU5CbmApX9BjGgEpePnlzMSD
SrjjYEs8MxJjjbGGtdcgimCRrjXOdMlGFSptUcAvP0SyJ4qTSUVWYYzbN5t5
aBT+r7BBOys7gwxshpSxwJ5Uhj/rnOkCbnpJz/+VnFQaSOJOZguFGbevIEzD
+klZ87ExPVsu3DB0ZHbJuNM4VuYm85oMQApcE0GDEHeZNXvLvFtwfUV/eV0P
V6Kcq1dZcOxc7qPbtarTgjtLgqPuK7pMEzYBMaDW1Sqeb+Tk4xisjoU8iO3w
cUJ1K+8eH2eADTCzzDiXqCz4KS/+oppKhCBnL1uZlwoZWjb0oXk9b0JmwkwW
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
obO0V2tBXLsawWBQNOeZBbVplWgYnXMbfYcjTJa4ceftxMxcKjiUmfF5nF41
E0JIzYbpHxcZzEhNtWmVaCPmbaGG48TeUoM+MvRlpqo6N28gNjJqNtlnu6Ni
IgwOZ+u7zAteQFRGYWp0bNkTMJMONi/WhYyaTRY69zzNGM8OHmnWM9PMMTa/
caVsFDM1Itwd0ApiutaYJtwXOBnGUrNFbfd3mZ/slvjxZQ8ZZ+pkuHkWqOye
pO2vmEI+F6f6idwNI6n5g5szLkZvZmrLJ8y8IY7J17HH/p9Dw0dmPeTtiKJ5
Q9utxb3MnKLTbcRiZumNSe0edsz0zThHK4gXzuf03LyVmWbSSTclcnTSWkRv
jWgO6AaDpk+H9yvDrW5O1W8i8xbep6hyhZtD2fMtHTNpugpbP2ZW6CLaFDXP
Qc2uksBd0h2zbUPWvLTX03ScEzBzJj3XIkMoHTNr7BFfMXi5VXmX6xyO4aNF
kzTnTMX9ZWOcjOJNU+0VbKLVZGoeAWUIU8PM+ztNxMywytu7GHiEYRafSV+M
qEvQn5lN8JqeRM0DMH5wEW1tv+E0mJ0FQxhSkBtrTshMuyVtL21Kk8zUjtKf
GOY+Z7oK42+x2ig1b1DmWD7Cgjw1JxkDGRy8GttuFNKUyHk3MUGn+bPUlDOz
1hpbFNDed1b1ilImm5ogDZKRTZ3kqXk/MYFL/So1xzPzEwW099j1OneaylUi
YU4blFLNzkzYac4gTncIz2J8GtxtQ28Fk0RTWMDacmeAmXB2X34JTtI3ZqDC
vpi5te45M03MnMqrtQixwt2SAKArcXKWyN3ef5m0KSxmtjOTjjO/OcpTtjGz
NX0jQMWHy6FSqoiaCeeYgwmgBtNMhHeE9Mx/azERM6U5NjLL3H1GF1R8sPsU
DAVLxzFMJk/+zRrzMfP3qCndjtW+3yO6rUssYhuxtqruqmNHCxuloe6Tt9Wx
5d4ySj4fx220nYSYcAaoh4fOBfE+yfZTUhEzxZ1mY9lf8SvStBWKAHYnDvUf
tM2J/mY2NyKLb3fM9bQcLedgZlDrVmPjuXFZl8lunm3PdBR6e54sdGwFZRH+
zbkwtUPeFtHF/NMQE3aav8jMi7pMjpk/pss8QrXHlUFsRs53WRfmiJnryzle
zsbM++6mHAWr5hIvexVGmTmbNq0qBs0nXBUvhCv1bXVcWVskhoSaxUtU6nTl
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
/0bB
          "], "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, 
          Interleaving -> False, MetaInformation -> 
          Association[
           "Exif" -> Association[
             "XResolution" -> 72, "YResolution" -> 72, "ResolutionUnit" -> 
              "inch", "Software" -> "GIMP 2.8.22", "DateTime" -> 
              DateObject[{2018, 5, 12, 18, 18, 19.}, "Instant", "Gregorian", 
                1.], "ExifVersion" -> "2.10", "FlashpixVersion" -> "1.00", 
              "ColorSpace" -> "Uncalibrated", "PixelXDimension" -> 922, 
              "PixelYDimension" -> 461]]]; $CellContext`earth = {
          Translate[
           First[
            SphericalPlot3D[
            6371000, {$CellContext`theta, 0, Pi}, {$CellContext`phi, 0, 2 Pi},
              Mesh -> None, TextureCoordinateFunction -> ({#5, 1 - #4}& ), 
             PlotStyle -> Directive[
               Texture[
                ImageData[$CellContext`image]]], Lighting -> "Neutral", Axes -> 
             False, Boxed -> False]], {0, 0, 0}]}; 
       If[$CellContext`clicked == False, $CellContext`output$$ = 
         "Set data and select view, then click 'Update' to view animation"]; 
       Dynamic[$CellContext`output$$, 
         TrackedSymbols :> {$CellContext`output$$}]), "Specifications" :> {
        Button[
        "Update", $CellContext`clicked = True; 
         If[$CellContext`clicked == False, $CellContext`output$$ = 
           "Set data and select view, then click 'Update' to view animation", \
$CellContext`output$$ = "Updating..."]; 
         FinishDynamic[]; $CellContext`psiQ = $CellContext`\[Tau]$$ Cos[
             $CellContext`\[Alpha][$CellContext`t]] Cos[
             $CellContext`\[Gamma][$CellContext`t]]; $CellContext`alphaQ = \
$CellContext`\[Tau]$$ Sin[
             $CellContext`\[Gamma][$CellContext`t]]; $CellContext`period$$ = 
          2 Pi Sqrt[$CellContext`a$$^3/$CellContext`\[Mu]$$]; 
         If[$CellContext`time$$ > $CellContext`ranget$$, \
$CellContext`ranget$$ = $CellContext`time$$]; $CellContext`alphadsh0 = 
          0; $CellContext`psidsh0 = 
          0; $CellContext`r0 = $CellContext`a$$ (
            1 - $CellContext`e$$); $CellContext`rdsh0 = 
          0; $CellContext`theta0 = 
          0; $CellContext`thetadsh0 = (1/$CellContext`r0) 
           Sqrt[$CellContext`\[Mu]$$ (
              1 + $CellContext`e$$)/($CellContext`a$$ (
              1 - $CellContext`e$$))]; $CellContext`rm[$CellContext`t] = \
{{$CellContext`rc[$CellContext`t] Cos[
               $CellContext`\[Theta][$CellContext`t]]}, \
{$CellContext`rc[$CellContext`t] Sin[
               $CellContext`\[Theta][$CellContext`t]]}, {
            0}}; $CellContext`rp1[$CellContext`t] = \
$CellContext`rm[$CellContext`t] + {{$CellContext`l$$ Cos[
                $CellContext`\[Alpha][$CellContext`t]] 
              Cos[$CellContext`\[Psi][$CellContext`t] + \
$CellContext`\[Theta][$CellContext`t]]}, {$CellContext`l$$ Cos[
                $CellContext`\[Alpha][$CellContext`t]] 
              Sin[$CellContext`\[Psi][$CellContext`t] + \
$CellContext`\[Theta][$CellContext`t]]}, {$CellContext`l$$ Sin[
                $CellContext`\[Alpha][$CellContext`t]]}}; \
$CellContext`rp2[$CellContext`t] = $CellContext`rm[$CellContext`t] - \
{{$CellContext`l$$ Cos[
               $CellContext`\[Alpha][$CellContext`t]] 
             Cos[$CellContext`\[Psi][$CellContext`t] + \
$CellContext`\[Theta][$CellContext`t]]}, {$CellContext`l$$ Cos[
               $CellContext`\[Alpha][$CellContext`t]] 
             Sin[$CellContext`\[Psi][$CellContext`t] + \
$CellContext`\[Theta][$CellContext`t]]}, {$CellContext`l$$ Sin[
               $CellContext`\[Alpha][$CellContext`t]]}}; 
         Subscript[$CellContext`T, $CellContext`lin] = (1/2) (
            2 $CellContext`Mp$$) (
            Derivative[
              1][$CellContext`rc][$CellContext`t]^2 + \
$CellContext`rc[$CellContext`t]^2 
             Derivative[
               1][$CellContext`\[Theta]][$CellContext`t]^2); $CellContext`\
\[Omega][$CellContext`t] = {{
            Derivative[
              1][$CellContext`\[Gamma]][$CellContext`t] + (
               Derivative[1][$CellContext`\[Theta]][$CellContext`t] + 
               Derivative[1][$CellContext`\[Psi]][$CellContext`t]) Sin[
                $CellContext`\[Alpha][$CellContext`t]]}, {(-Cos[
                 $CellContext`\[Gamma][$CellContext`t]]) 
              Derivative[1][$CellContext`\[Alpha]][$CellContext`t] + Cos[
                $CellContext`\[Alpha][$CellContext`t]] Sin[
                $CellContext`\[Gamma][$CellContext`t]] (
               Derivative[1][$CellContext`\[Theta]][$CellContext`t] + 
               Derivative[1][$CellContext`\[Psi]][$CellContext`t])}, {Sin[
                $CellContext`\[Gamma][$CellContext`t]] 
              Derivative[1][$CellContext`\[Alpha]][$CellContext`t] + Cos[
                $CellContext`\[Alpha][$CellContext`t]] Cos[
                $CellContext`\[Gamma][$CellContext`t]] (
               Derivative[1][$CellContext`\[Theta]][$CellContext`t] + 
               Derivative[1][$CellContext`\[Psi]][$CellContext`t])}}; 
         Subscript[
           I, 123] = {{0, 0, 0}, {
            0, 2 $CellContext`Mp$$ $CellContext`l$$^2, 0}, {
            0, 0, 2 $CellContext`Mp$$ $CellContext`l$$^2}}; 
         Subscript[$CellContext`T, $CellContext`rot] = (1/2) Dot[
             Transpose[
              $CellContext`\[Omega][$CellContext`t]], 
             Subscript[I, 123], 
             $CellContext`\[Omega][$CellContext`t]]; $CellContext`T = 
          Subscript[$CellContext`T, $CellContext`lin] + 
           Subscript[$CellContext`T, $CellContext`rot]; 
         Subscript[$CellContext`U, $CellContext`p1] = -($CellContext`\[Mu]$$ \
$CellContext`Mp$$/Sqrt[
             Dot[
              Transpose[
               $CellContext`rp1[$CellContext`t]], 
              $CellContext`rp1[$CellContext`t]]]); 
         Subscript[$CellContext`U, $CellContext`p2] = -($CellContext`\[Mu]$$ \
$CellContext`Mp$$/Sqrt[
             Dot[
              Transpose[
               $CellContext`rp2[$CellContext`t]], 
              $CellContext`rp2[$CellContext`t]]]); $CellContext`V = 
          Subscript[$CellContext`U, $CellContext`p1] + 
           Subscript[$CellContext`U, $CellContext`p2]; $CellContext`L = \
$CellContext`T - $CellContext`V; $CellContext`eqn1 = Simplify[D[
              D[$CellContext`L, 
               Derivative[
               1][$CellContext`\[Psi]][$CellContext`t]], $CellContext`t] - 
            D[$CellContext`L, 
             $CellContext`\[Psi][$CellContext`t]] - $CellContext`psiQ]; \
$CellContext`eqn2 = Simplify[D[
              D[$CellContext`L, 
               Derivative[
               1][$CellContext`\[Alpha]][$CellContext`t]], $CellContext`t] - 
            D[$CellContext`L, 
             $CellContext`\[Alpha][$CellContext`t]] - $CellContext`alphaQ]; \
$CellContext`eqn3 = Simplify[D[
              D[$CellContext`L, 
               Derivative[
               1][$CellContext`\[Theta]][$CellContext`t]], $CellContext`t] - 
            D[$CellContext`L, 
             $CellContext`\[Theta][$CellContext`t]]]; $CellContext`eqn4 = 
          Simplify[D[
              D[$CellContext`L, 
               Derivative[
               1][$CellContext`rc][$CellContext`t]], $CellContext`t] - 
            D[$CellContext`L, 
             $CellContext`rc[$CellContext`t]]]; $CellContext`eqn5 = Cos[
              $CellContext`\[Alpha][$CellContext`t]] 
            Derivative[1][$CellContext`\[Alpha]][$CellContext`t] (
             Derivative[1][$CellContext`\[Theta]][$CellContext`t] + 
             Derivative[1][$CellContext`\[Psi]][$CellContext`t]) + 
           Derivative[2][$CellContext`\[Gamma]][$CellContext`t] + Sin[
              $CellContext`\[Alpha][$CellContext`t]] (
             Derivative[2][$CellContext`\[Theta]][$CellContext`t] + 
             Derivative[
              2][$CellContext`\[Psi]][$CellContext`t]); $CellContext`system = 
          NDSolve[{$CellContext`eqn1 == 0, $CellContext`eqn2 == 
             0, $CellContext`eqn3 == 0, $CellContext`eqn4 == 
             0, $CellContext`eqn5 == 
             0, $CellContext`\[Alpha][0] == $CellContext`alpha0$$, 
             Derivative[1][$CellContext`\[Alpha]][
              0] == $CellContext`alphadsh0, $CellContext`\[Psi][
              0] == $CellContext`psi0$$, 
             Derivative[1][$CellContext`\[Psi]][
              0] == $CellContext`psidsh0, $CellContext`\[Theta][
              0] == $CellContext`theta0, 
             Derivative[1][$CellContext`\[Theta]][
              0] == $CellContext`thetadsh0, $CellContext`rc[
              0] == $CellContext`r0, Derivative[1][$CellContext`rc][0] == 
             0, $CellContext`\[Gamma][0] == $CellContext`gamma0$$, 
             Derivative[1][$CellContext`\[Gamma]][0] == 
             0}, {$CellContext`\[Psi], $CellContext`\[Alpha], $CellContext`\
\[Theta], $CellContext`rc, $CellContext`\[Gamma]}, {$CellContext`t, 
             0, $CellContext`ranget$$}, MaxSteps -> Infinity, AccuracyGoal -> 
            Automatic, PrecisionGoal -> 10]; $CellContext`gammas[
            Pattern[$CellContext`t, 
             Blank[]]] := Evaluate[
            ReplaceAll[
             $CellContext`\[Gamma][$CellContext`t], 
             Part[$CellContext`system, 1]]]; $CellContext`psis[
            Pattern[$CellContext`t, 
             Blank[]]] := ReplaceAll[
            $CellContext`\[Psi][$CellContext`t], 
            Part[$CellContext`system, 1]]; $CellContext`alphas[
            Pattern[$CellContext`t, 
             Blank[]]] := ReplaceAll[
            $CellContext`\[Alpha][$CellContext`t], 
            Part[$CellContext`system, 1]]; $CellContext`thetas[
            Pattern[$CellContext`t, 
             Blank[]]] := ReplaceAll[
            $CellContext`\[Theta][$CellContext`t], 
            Part[$CellContext`system, 1]]; $CellContext`rs[
            Pattern[$CellContext`t, 
             Blank[]]] := ReplaceAll[
            $CellContext`rc[$CellContext`t], 
            Part[$CellContext`system, 1]]; $CellContext`radius = Table[
            Evaluate[
             $CellContext`rs[$CellContext`t]], {$CellContext`t, 
             0, $CellContext`ranget$$, $CellContext`ranget$$/
             100000}]; $CellContext`rcc[
            Pattern[$CellContext`t, 
             Blank[]]] := $CellContext`rs[$CellContext`t]; $CellContext`RC1[
            Pattern[$CellContext`t, 
             Blank[]]] := {$CellContext`rcc[$CellContext`t] Cos[
              $CellContext`thetas[$CellContext`t]], \
$CellContext`rcc[$CellContext`t] Sin[
              $CellContext`thetas[$CellContext`t]], 0}; $CellContext`trace1[
            Pattern[$CellContext`t$, 
             Blank[]]] := {Blue, 
            Line[
             Table[
              $CellContext`RC1[$CellContext`i], {$CellContext`i, 
               
               If[$CellContext`t$ + $CellContext`period$$/
                  4 > $CellContext`period$$, 
                
                Round[$CellContext`t$ - $CellContext`period$$ + \
$CellContext`period$$/4], 1], $CellContext`t$, 100}]]}; $CellContext`point1[
            Pattern[$CellContext`t, 
             Blank[]]] := {Red, 
            Point[
             $CellContext`RC1[$CellContext`t]]}; $CellContext`rfactor = 
          35/Min[$CellContext`radius]; $CellContext`earth1 = {White, 
            Sphere[{0, 0, 0}, 10]}; $CellContext`rp = 
          If[(10/50000) $CellContext`l$$ < 30, (10/50000) $CellContext`l$$, 
            30]; $CellContext`rcc1[
            Pattern[$CellContext`t, 
             
             Blank[]]] := $CellContext`rfactor \
$CellContext`rs[$CellContext`t]; $CellContext`RC[
            Pattern[$CellContext`t, 
             Blank[]]] := {$CellContext`rcc1[$CellContext`t] Cos[
              $CellContext`thetas[$CellContext`t]], \
$CellContext`rcc1[$CellContext`t] Sin[
              $CellContext`thetas[$CellContext`t]], 0}; $CellContext`trace[
            Pattern[$CellContext`t$, 
             Blank[]]] := {Blue, 
            Line[
             Table[
              $CellContext`RC[$CellContext`i], {$CellContext`i, 
               
               If[$CellContext`t$ + $CellContext`period$$/
                  4 > $CellContext`period$$, 
                
                Round[$CellContext`t$ - $CellContext`period$$ + \
$CellContext`period$$/4], 1], $CellContext`t$, 100}]]}; $CellContext`point[
            Pattern[$CellContext`t, 
             Blank[]]] := {Red, 
            Point[
             $CellContext`RC[$CellContext`t]]}; $CellContext`RP1[
            Pattern[$CellContext`t, 
             Blank[]]] := $CellContext`RC[$CellContext`t] + {$CellContext`rp 
             Cos[
               $CellContext`alphas[$CellContext`t]] 
             Cos[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`rp Cos[
               $CellContext`alphas[$CellContext`t]] 
             Sin[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`rp Sin[
               $CellContext`alphas[$CellContext`t]]}; $CellContext`RP2[
            Pattern[$CellContext`t, 
             Blank[]]] := $CellContext`RC[$CellContext`t] - {$CellContext`rp 
            Cos[
              $CellContext`alphas[$CellContext`t]] 
            Cos[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`rp Cos[
              $CellContext`alphas[$CellContext`t]] 
            Sin[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`rp Sin[
              $CellContext`alphas[$CellContext`t]]}; $CellContext`P1[
            Pattern[$CellContext`t, 
             Blank[]]] := {Gray, 
            Sphere[
             $CellContext`RP1[$CellContext`t], 1]}; $CellContext`P2[
            Pattern[$CellContext`t, 
             Blank[]]] := {Gray, 
            Sphere[
             $CellContext`RP2[$CellContext`t], 1]}; $CellContext`tether1[
            Pattern[$CellContext`t, 
             Blank[]]] := {Black, 
            Cylinder[{
              $CellContext`RC[$CellContext`t], 
              $CellContext`RP2[$CellContext`t]}, 0.3]}; $CellContext`tether2[
            Pattern[$CellContext`t, 
             Blank[]]] := {White, 
            Cylinder[{
              $CellContext`RC[$CellContext`t], 
              $CellContext`RP1[$CellContext`t]}, 0.3]}; $CellContext`xaxis[
            Pattern[$CellContext`t, 
             Blank[]]] := {Red, 
            Cylinder[{
              $CellContext`RC[$CellContext`t], \
$CellContext`RC[$CellContext`t] + 15 Normalize[
                 $CellContext`RC[$CellContext`t]]}, 0.1]}; $CellContext`yaxis[
            Pattern[$CellContext`t, 
             Blank[]]] := {Green, 
            Cylinder[{
              $CellContext`RC[$CellContext`t], \
$CellContext`RC[$CellContext`t] + 15 Normalize[{-Part[
                    $CellContext`RC[$CellContext`t], 2], 
                  Part[
                   $CellContext`RC[$CellContext`t], 1], 0}]}, 
             0.1]}; $CellContext`zaxis[
            Pattern[$CellContext`t, 
             Blank[]]] := {Blue, 
            Cylinder[{
              $CellContext`RC[$CellContext`t], \
$CellContext`RC[$CellContext`t] + 15 {0, 0, 1}}, 0.1]}; $CellContext`RP11[
            Pattern[$CellContext`t, 
             Blank[]]] := {$CellContext`rp Cos[
              $CellContext`alphas[$CellContext`t]] Cos[
              $CellContext`psis[$CellContext`t]], $CellContext`rp Cos[
              $CellContext`alphas[$CellContext`t]] Sin[
              $CellContext`psis[$CellContext`t]], $CellContext`rp Sin[
              $CellContext`alphas[$CellContext`t]]}; $CellContext`RP21[
            Pattern[$CellContext`t, 
             Blank[]]] := -{$CellContext`rp Cos[
               $CellContext`alphas[$CellContext`t]] Cos[
               $CellContext`psis[$CellContext`t]], $CellContext`rp Cos[
               $CellContext`alphas[$CellContext`t]] Sin[
               $CellContext`psis[$CellContext`t]], $CellContext`rp Sin[
               $CellContext`alphas[$CellContext`t]]}; $CellContext`P11[
            Pattern[$CellContext`t, 
             Blank[]]] := {Gray, 
            Sphere[
             $CellContext`RP11[$CellContext`t], 1]}; $CellContext`P21[
            Pattern[$CellContext`t, 
             Blank[]]] := {Gray, 
            Sphere[
             $CellContext`RP21[$CellContext`t], 1]}; $CellContext`tether11[
            Pattern[$CellContext`t, 
             Blank[]]] := {Black, 
            Cylinder[{{0, 0, 0}, 
              $CellContext`RP21[$CellContext`t]}, 0.3]}; $CellContext`tether21[
            Pattern[$CellContext`t, 
             Blank[]]] := {White, 
            Cylinder[{{0, 0, 0}, 
              $CellContext`RP11[$CellContext`t]}, 
             0.3]}; $CellContext`xaxis2 := {Red, Thick, 
            InfiniteLine[{{-12, 0, 0}, {12, 0, 0}}]}; $CellContext`yaxis2 := {
           Black, Thick, 
            InfiniteLine[{{0, -12, 0}, {0, 12, 0}}]}; $CellContext`zaxis2 := {
           Black, Thick, 
            InfiniteLine[{{0, 0, -12}, {0, 0, 12}}]}; $CellContext`tracerange = 
          500; $CellContext`tracep1[
            Pattern[$CellContext`t, 
             Blank[]]] := {Red, 
            Line[
             Table[
              $CellContext`RP11[$CellContext`x], {$CellContext`x, 
               
               If[$CellContext`t - $CellContext`tracerange > 
                0, $CellContext`t - $CellContext`tracerange, 
                1], $CellContext`t, 10}]]}; $CellContext`tracep2[
            Pattern[$CellContext`t, 
             Blank[]]] := {Blue, 
            Line[
             Table[
              $CellContext`RP21[$CellContext`x], {$CellContext`x, 
               
               If[$CellContext`t - $CellContext`tracerange > 
                0, $CellContext`t - $CellContext`tracerange, 
                1], $CellContext`t, 10}]]}; Subscript[$CellContext`e$$, 1][
            Pattern[$CellContext`t, 
             Blank[]]] := $CellContext`RP11[$CellContext`t]; 
         Subscript[$CellContext`e$$, 2][
            Pattern[$CellContext`t$, 
             Blank[]]] := RotationTransform[
            $CellContext`gammas[$CellContext`t$], 
            Subscript[$CellContext`e$$, 1][$CellContext`t$]][{-Sin[
               $CellContext`psis[$CellContext`t$]], 
             Cos[
              $CellContext`psis[$CellContext`t$]], 0}]; 
         Subscript[$CellContext`e$$, 3][
            Pattern[$CellContext`t$, 
             Blank[]]] := Cross[
            Subscript[$CellContext`e$$, 1][$CellContext`t$], 
            
            Subscript[$CellContext`e$$, 
             2][$CellContext`t$]]; $CellContext`oneax[
            Pattern[$CellContext`t$, 
             Blank[]]] := {Green, Thick, 
            Line[{{0, 0, 0}, 20 Normalize[
                
                Subscript[$CellContext`e$$, 
                 1][$CellContext`t$]]}]}; $CellContext`twoax[
            Pattern[$CellContext`t$, 
             Blank[]]] := {Green, Thick, 
            Line[{{0, 0, 0}, 20 Normalize[
                
                Subscript[$CellContext`e$$, 
                 2][$CellContext`t$]]}]}; $CellContext`threeax[
            Pattern[$CellContext`t$, 
             Blank[]]] := {Purple, Thick, 
            Line[{{0, 0, 0}, 20 Normalize[
                
                Subscript[$CellContext`e$$, 
                 3][$CellContext`t$]]}]}; $CellContext`alphaxy[
            Pattern[$CellContext`t, 
             Blank[]]] := {$CellContext`rp Cos[
              $CellContext`alphas[$CellContext`t]] Cos[
              $CellContext`psis[$CellContext`t]], $CellContext`rp Cos[
              $CellContext`alphas[$CellContext`t]] Sin[
              $CellContext`psis[$CellContext`t]], 0}; $CellContext`up[
            Pattern[$CellContext`t, 
             Blank[]]] := {Blue, Dashed, 
            Line[{{
               $CellContext`alphaxy[$CellContext`t], 
               $CellContext`RP11[$CellContext`t]}}]}; $CellContext`out[
            Pattern[$CellContext`t, 
             Blank[]]] := {Blue, Dashed, 
            Line[{{
               $CellContext`alphaxy[$CellContext`t], {0, 0, 
               0}}}]}; $CellContext`flat = {Blue, 
            Opacity[0.1], 
            
            InfinitePlane[{{0, 0, 0}, {1, 0, 0}, {0, 1, 
             0}}]}; $CellContext`tlength = 250000; $CellContext`RC3[
            Pattern[$CellContext`t, 
             Blank[]]] := {$CellContext`rs[$CellContext`t] Cos[
              $CellContext`thetas[$CellContext`t]], \
$CellContext`rs[$CellContext`t] Sin[
              $CellContext`thetas[$CellContext`t]], 0}; $CellContext`RP13[
            Pattern[$CellContext`t, 
             
             Blank[]]] := $CellContext`RC3[$CellContext`t] + \
{$CellContext`tlength Cos[
               $CellContext`alphas[$CellContext`t]] 
             Cos[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`tlength Cos[
               $CellContext`alphas[$CellContext`t]] 
             Sin[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`tlength Sin[
               $CellContext`alphas[$CellContext`t]]}; $CellContext`RP23[
            Pattern[$CellContext`t, 
             
             Blank[]]] := $CellContext`RC3[$CellContext`t] - \
{$CellContext`tlength Cos[
              $CellContext`alphas[$CellContext`t]] 
            Cos[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`tlength Cos[
              $CellContext`alphas[$CellContext`t]] 
            Sin[$CellContext`psis[$CellContext`t] + \
$CellContext`thetas[$CellContext`t]], $CellContext`tlength Sin[
              $CellContext`alphas[$CellContext`t]]}; $CellContext`P13[
            Pattern[$CellContext`t, 
             Blank[]]] := {
            Darker[Gray], 
            Sphere[
             $CellContext`RP13[$CellContext`t], 20000]}; $CellContext`P23[
            Pattern[$CellContext`t, 
             Blank[]]] := {
            Darker[Gray], 
            Sphere[
             $CellContext`RP23[$CellContext`t], 20000]}; $CellContext`tether13[
            Pattern[$CellContext`t, 
             Blank[]]] := {Gray, Thick, 
            Line[{
              $CellContext`RC3[$CellContext`t], 
              $CellContext`RP23[$CellContext`t]}]}; $CellContext`tether23[
            Pattern[$CellContext`t, 
             Blank[]]] := {Gray, Thick, 
            Line[{
              $CellContext`RC3[$CellContext`t], 
              $CellContext`RP13[$CellContext`t]}]}; $CellContext`xaxis3[
            Pattern[$CellContext`t, 
             Blank[]]] := {Red, 
            Opacity[0.5], Thick, 
            Line[{
              $CellContext`RC3[$CellContext`t], 
              1.1 $CellContext`RC3[$CellContext`t]}]}; $CellContext`yaxis3[
            Pattern[$CellContext`t, 
             Blank[]]] := {Green, 
            Opacity[0.5], Thick, 
            Line[{
              $CellContext`RC3[$CellContext`t], \
$CellContext`RC3[$CellContext`t] + 0.1 {-Part[
                   $CellContext`RC3[$CellContext`t], 2], 
                 Part[
                  $CellContext`RC3[$CellContext`t], 1], 
                 0}}]}; $CellContext`zaxis3[
            Pattern[$CellContext`t, 
             Blank[]]] := {Blue, 
            Opacity[0.5], Thick, 
            Line[{
              $CellContext`RC3[$CellContext`t], \
$CellContext`RC3[$CellContext`t] + 0.1 Norm[
                 $CellContext`RC3[$CellContext`t]] {0, 0, 
                1}}]}; $CellContext`tracerange = (4/
            5) $CellContext`period$$; $CellContext`tracep13[
            Pattern[$CellContext`t, 
             Blank[]]] := {Red, Thick, 
            Line[
             Table[
              $CellContext`RP13[$CellContext`x], {$CellContext`x, 
               
               If[$CellContext`t - $CellContext`tracerange > 
                0, $CellContext`t - $CellContext`tracerange, 
                1], $CellContext`t, 10}]]}; $CellContext`tracep23[
            Pattern[$CellContext`t, 
             Blank[]]] := {Blue, Thick, 
            Line[
             Table[
              $CellContext`RP23[$CellContext`x], {$CellContext`x, 
               
               If[$CellContext`t - $CellContext`tracerange > 
                0, $CellContext`t - $CellContext`tracerange, 
                1], $CellContext`t, 10}]]}; $CellContext`camerapoint[
            Pattern[$CellContext`t, 
             Blank[]]] := $CellContext`RC3[$CellContext`t] + 
           0.5 $CellContext`RC3[$CellContext`t] + {0, 2000000, 
            2000000}; $CellContext`imagePadding = {{100, 10}, {25, 
           10}}; $CellContext`graphicsgrid = Grid[{{
              If[$CellContext`switch$$ == "Earth Scale View", 
               Dynamic[
                Graphics3D[{
                  $CellContext`trace1[$CellContext`time$$], \
$CellContext`earth, 
                  $CellContext`point1[$CellContext`time$$]}, Boxed -> False, 
                 PlotRange -> 
                 Max[$CellContext`radius] + 0.1 Max[$CellContext`radius], 
                 ImageSize -> {600, 600}, ViewPoint -> Above, ViewProjection -> 
                 "Orthographic", Lighting -> {{"Ambient", White}}]], 
               If[$CellContext`switch$$ == "Simplified View", 
                Dynamic[
                 Graphics3D[{
                   $CellContext`trace[$CellContext`time$$], \
$CellContext`earth1, 
                   $CellContext`P1[$CellContext`time$$], 
                   $CellContext`P2[$CellContext`time$$], 
                   $CellContext`tether1[$CellContext`time$$], 
                   $CellContext`tether2[$CellContext`time$$], 
                   $CellContext`xaxis[$CellContext`time$$], 
                   $CellContext`yaxis[$CellContext`time$$], 
                   $CellContext`zaxis[$CellContext`time$$]}, Boxed -> False, 
                  PlotRange -> 
                  1.1 (Max[$CellContext`radius $CellContext`rfactor] + \
$CellContext`rp), ImageSize -> {600, 600}, ViewPoint -> {1.3, -2.4, 2}]], 
                If[$CellContext`switch$$ == "Body Frame", 
                 Dynamic[
                  Graphics3D[{$CellContext`flat, 
                    $CellContext`P11[$CellContext`time$$], 
                    $CellContext`P21[$CellContext`time$$], \
$CellContext`xaxis2, $CellContext`yaxis2, $CellContext`zaxis2, 
                    $CellContext`tether11[$CellContext`time$$], 
                    $CellContext`tether21[$CellContext`time$$], 
                    $CellContext`up[$CellContext`time$$], 
                    $CellContext`out[$CellContext`time$$], 
                    $CellContext`oneax[$CellContext`time$$], 
                    $CellContext`twoax[$CellContext`time$$], 
                    $CellContext`threeax[$CellContext`time$$], 
                    $CellContext`tracep1[$CellContext`time$$], 
                    $CellContext`tracep2[$CellContext`time$$]}, Boxed -> 
                   False, ViewProjection -> "Perspective", PlotRange -> 20, 
                   ImageSize -> {600, 600}]], 
                 Dynamic[
                  Graphics3D[{$CellContext`earth, 
                    $CellContext`P13[$CellContext`time$$], 
                    $CellContext`P23[$CellContext`time$$], 
                    $CellContext`tether13[$CellContext`time$$], 
                    $CellContext`tether23[$CellContext`time$$], 
                    $CellContext`xaxis3[$CellContext`time$$], 
                    $CellContext`yaxis3[$CellContext`time$$], 
                    $CellContext`zaxis3[$CellContext`time$$], 
                    $CellContext`tracep13[$CellContext`time$$], 
                    $CellContext`tracep23[$CellContext`time$$]}, Background -> 
                   Black, Boxed -> False, PlotRange -> 
                   Max[$CellContext`radius] + 0.1 Max[$CellContext`radius], 
                   ImageSize -> {900, 600}, ViewProjection -> "Perspective", 
                   ViewVector -> {
                    Evaluate[
                    $CellContext`camerapoint[$CellContext`time$$]], 
                    Evaluate[
                    $CellContext`RC3[$CellContext`time$$]]}, 
                   Lighting -> {"Point", White, {0, 0, 0}}]]]]]}}, ItemSize -> 
            Dynamic[Automatic]]; 
         If[$CellContext`switch$$ == 
           "Cinematic View", $CellContext`graphgrid = $CellContext`\
\[LetterSpace], $CellContext`graphgrid = Grid[{{
               Plot[
                Evaluate[
                 ReplaceAll[
                  $CellContext`\[Psi][$CellContext`t], $CellContext`system]], \
{$CellContext`t, 0, $CellContext`ranget$$}, Frame -> True, FrameTicks -> 
                Automatic, GridLines -> Automatic, 
                ImageSize -> {300, Automatic}, 
                ImagePadding -> $CellContext`imagePadding, 
                FrameLabel -> {"time", "\[Psi][t]"}]}, {
               Plot[
                Evaluate[
                 ReplaceAll[
                  $CellContext`\[Alpha][$CellContext`t], \
$CellContext`system]], {$CellContext`t, 0, $CellContext`ranget$$}, Frame -> 
                True, FrameTicks -> Automatic, GridLines -> Automatic, 
                ImageSize -> {300, Automatic}, 
                ImagePadding -> $CellContext`imagePadding, 
                FrameLabel -> {"time", "\[Alpha][t]"}]}, {
               Plot[
                Evaluate[
                 ReplaceAll[
                  $CellContext`\[Gamma][$CellContext`t], \
$CellContext`system]], {$CellContext`t, 0, $CellContext`ranget$$}, Frame -> 
                True, FrameTicks -> Automatic, GridLines -> Automatic, 
                ImageSize -> {300, Automatic}, 
                ImagePadding -> $CellContext`imagePadding, 
                FrameLabel -> {"time", "\[Gamma][t]"}]}, {
               Plot[
                Evaluate[
                 ReplaceAll[
                  $CellContext`rc[$CellContext`t], $CellContext`system]], \
{$CellContext`t, 0, $CellContext`ranget$$}, Frame -> True, FrameTicks -> 
                Automatic, GridLines -> Automatic, 
                ImageSize -> {300, Automatic}, 
                ImagePadding -> $CellContext`imagePadding, 
                FrameLabel -> {"time", "r[t]"}]}, {
               Plot[
                Evaluate[
                 ReplaceAll[
                  $CellContext`\[Theta][$CellContext`t], \
$CellContext`system]], {$CellContext`t, 0, $CellContext`ranget$$}, Frame -> 
                True, FrameTicks -> Automatic, GridLines -> Automatic, 
                ImageSize -> {300, Automatic}, 
                ImagePadding -> $CellContext`imagePadding, 
                FrameLabel -> {
                 "time", "\[Theta][t]"}]}}]]; $CellContext`output$$ = 
          Grid[{{$CellContext`graphgrid, $CellContext`graphicsgrid}}], Method -> 
         "Queued"], {{$CellContext`switch$$, "Simplified View", "3D view:"}, {
         "Earth Scale View", "Simplified View", "Body Frame", 
          "Cinematic View"}, ControlType -> RadioButton, 
         Appearance -> ("Vertical" -> {2, 2})}, 
        "System Data", {{$CellContext`\[Mu]$$, 3.9877848*^14, 
          "Gravitational Parameter"}, ControlType -> 
         InputField}, {{$CellContext`Mp$$, 1000, "Payload Mass (kg)"}, 
         ControlType -> 
         InputField}, {{$CellContext`a$$, 6870000, "Semimajor Axis"}, 6870000,
          50900000, Appearance -> 
         "Labeled"}, {{$CellContext`period$$, $CellContext`period$$, 
          "Period"}}, {{$CellContext`e$$, 0, "Eccentricity"}, 0, 0.99, 
         Appearance -> 
         "Labeled"}, {{$CellContext`\[Tau]$$, 0, "Motor Torque"}, -20000000, 
         20000000, Appearance -> 
         "Labeled"}, {{$CellContext`l$$, 50000, "Tether Length (m)"}, 100, 
         100000, Appearance -> 
         "Labeled"}, {{$CellContext`ranget$$, 2 $CellContext`period$$, 
          "Maximum Time"}, 1000, 
         Dynamic[$CellContext`period$$ 20], Appearance -> "Labeled"}, 
        "\n", {{$CellContext`time$$, 1, "Time"}, 1, 
         Dynamic[$CellContext`ranget$$], Appearance -> "Open", 
         AnimationRunning -> False, AnimationRate -> Rational[1, 100], 
         RefreshRate -> 600}, 
        "\nInitial Conditions", {{$CellContext`psi0$$, 0, 
          "Yaw Angle, \[Psi]"}, (-2) Pi, 2 Pi, Appearance -> 
         "Labeled"}, {{$CellContext`alpha0$$, 0, 
          "Pitch Angle, \[Alpha]"}, (-2) Pi, 2 Pi, Appearance -> 
         "Labeled"}, {{$CellContext`gamma0$$, 0, "Roll Angle, \[Gamma]"}, (-2)
           Pi, 2 Pi, Appearance -> "Labeled"}, {$CellContext`output$$, 
         ControlType -> None}, 
        "\n \n \n\nPreview animation pre-evaluates each frame of a simulation \
and displays it, \nso it can create smoother animations than the default \
animations shown, but \na large number of frames may cause a crash. To save \
an animation after a\npreview is created, uncomment the 'Export' cell below \
to save as an avi. \nFiles are ~1mb per frame so again a large number of \
frames (>100) will take\na long time or may cause the program to crash", 
        Button["Preview Animation", FinishDynamic[]; $CellContext`makeframes[
            Pattern[$CellContext`ttime$, 
             Blank[]]] := If[$CellContext`switch$$ == "Earth Scale View", 
            Dynamic[
             Graphics3D[{
               $CellContext`trace1[$CellContext`ttime$], $CellContext`earth, 
               $CellContext`point1[$CellContext`ttime$]}, Boxed -> False, 
              PlotRange -> 
              Max[$CellContext`radius] + 0.1 Max[$CellContext`radius], 
              ImageSize -> {600, 600}, ViewPoint -> Above, ViewProjection -> 
              "Orthographic", Lighting -> {{"Ambient", White}}]], 
            If[$CellContext`switch$$ == "Simplified View", 
             Dynamic[
              Graphics3D[{
                $CellContext`trace[$CellContext`ttime$], $CellContext`earth1, 
                $CellContext`P1[$CellContext`ttime$], 
                $CellContext`P2[$CellContext`ttime$], 
                $CellContext`tether1[$CellContext`ttime$], 
                $CellContext`tether2[$CellContext`ttime$], 
                $CellContext`xaxis[$CellContext`ttime$], 
                $CellContext`yaxis[$CellContext`ttime$], 
                $CellContext`zaxis[$CellContext`ttime$]}, Boxed -> False, 
               PlotRange -> 
               1.1 (Max[$CellContext`radius $CellContext`rfactor] + \
$CellContext`rp), ImageSize -> {600, 600}, ViewPoint -> {1.3, -2.4, 2}]], 
             If[$CellContext`switch$$ == "Body Frame", 
              Dynamic[
               Graphics3D[{$CellContext`flat, 
                 $CellContext`P11[$CellContext`ttime$], 
                 $CellContext`P21[$CellContext`ttime$], $CellContext`xaxis2, \
$CellContext`yaxis2, $CellContext`zaxis2, 
                 $CellContext`tether11[$CellContext`ttime$], 
                 $CellContext`tether21[$CellContext`ttime$], 
                 $CellContext`up[$CellContext`ttime$], 
                 $CellContext`out[$CellContext`ttime$], 
                 $CellContext`oneax[$CellContext`ttime$], 
                 $CellContext`twoax[$CellContext`ttime$], 
                 $CellContext`threeax[$CellContext`ttime$], 
                 $CellContext`tracep1[$CellContext`ttime$], 
                 $CellContext`tracep2[$CellContext`ttime$]}, Boxed -> False, 
                ViewProjection -> "Perspective", PlotRange -> 20, 
                ImageSize -> {600, 600}]], 
              Dynamic[
               Graphics3D[{$CellContext`earth, 
                 $CellContext`P13[$CellContext`ttime$], 
                 $CellContext`P23[$CellContext`ttime$], 
                 $CellContext`tether13[$CellContext`ttime$], 
                 $CellContext`tether23[$CellContext`ttime$], 
                 $CellContext`xaxis3[$CellContext`ttime$], 
                 $CellContext`yaxis3[$CellContext`ttime$], 
                 $CellContext`zaxis3[$CellContext`ttime$], 
                 $CellContext`tracep13[$CellContext`ttime$], 
                 $CellContext`tracep23[$CellContext`ttime$]}, Background -> 
                Black, Boxed -> False, PlotRange -> 
                Max[$CellContext`radius] + 0.1 Max[$CellContext`radius], 
                ImageSize -> {900, 600}, ViewProjection -> "Perspective", 
                ViewVector -> {
                  Evaluate[
                   $CellContext`camerapoint[$CellContext`ttime$]], 
                  Evaluate[
                   $CellContext`RC3[$CellContext`ttime$]]}, 
                Lighting -> {"Point", White, {0, 0, 0}}]]]]]; 
         Do[$CellContext`frames = Table[
             $CellContext`makeframes[$CellContext`zzz], {$CellContext`zzz, \
$CellContext`animationstart$$, $CellContext`animationend$$, \
($CellContext`animationend$$ - \
$CellContext`animationstart$$)/$CellContext`noframes$$}], 
           1]; $CellContext`output$$ = 
          ListAnimate[$CellContext`frames, AnimationRunning -> True], Method -> 
         "Queued"], {{$CellContext`framerate$$, 1, "Frame Rate"}, {1, 2, 3, 5,
          10, 15, 30, 60}, Appearance -> 
         "Labeled"}, {{$CellContext`noframes$$, 10, "Number of Frames"}, 1, 
         1000, Appearance -> 
         "Labeled"}, {{$CellContext`animationstart$$, 0, 
          "Animation Start Time"}, 0, 
         Dynamic[$CellContext`animationend$$], Appearance -> 
         "Labeled"}, {{$CellContext`animationend$$, 10, "Animation End Time"}, 
         Dynamic[$CellContext`animationstart$$ + 1], 
         Dynamic[$CellContext`ranget$$], Appearance -> "Labeled"}}, 
      "Options" :> {SynchronousUpdating -> False, ContinuousAction -> False}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{1210., {379., 385.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.7398681305048647`*^9, 3.7398688803114166`*^9, 3.7398691133788013`*^9, 
   3.739869354895306*^9, 3.7398694496098037`*^9, {3.7399461322065887`*^9, 
   3.7399461324690475`*^9}, {3.7399461807573085`*^9, 3.739946197597678*^9}, {
   3.7399462780300584`*^9, 3.7399463579813833`*^9}, {3.739946402750367*^9, 
   3.739946405571391*^9}, {3.7399464396754866`*^9, 3.7399464397821574`*^9}, {
   3.740135122180749*^9, 3.740135136108477*^9}, {3.7401351669659057`*^9, 
   3.740135194990522*^9}, {3.7401352904207544`*^9, 3.740135291269517*^9}, {
   3.7401353441945457`*^9, 3.7401353734137077`*^9}, {3.740135408774934*^9, 
   3.740135443870487*^9}, 3.7401354812742004`*^9, 3.740135526008649*^9, {
   3.7401355705844574`*^9, 3.740135605035985*^9}, {3.7401356540852613`*^9, 
   3.740135654305239*^9}, {3.7401356999172134`*^9, 3.7401357016286736`*^9}, 
   3.740136697454184*^9, {3.7401368411090164`*^9, 3.7401368639918594`*^9}, {
   3.7401369033725557`*^9, 3.7401369058967977`*^9}, 3.7411572356696405`*^9, {
   3.7415881359585347`*^9, 
   3.741588166124836*^9}},ExpressionUUID->"b5dfbf18-e6df-46f8-aae1-\
e6d118b4503f"],

Cell[CellGroupData[{

Cell["Video Export", "Section",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.739799612911662*^9, 3.7397996341149683`*^9}, {
  3.7398043601746435`*^9, 3.7398043604808273`*^9}, {3.739863109549204*^9, 
  3.7398631125681314`*^9}, {3.73986399804239*^9, 3.7398639996800113`*^9}, {
  3.739864981069187*^9, 3.7398652173474274`*^9}, {3.7398681440476875`*^9, 
  3.7398681801890574`*^9}},ExpressionUUID->"329001ec-d69b-4b78-bcd6-\
ff9a77689c19"],

Cell[TextData[{
 "Un-comment and evaluate the cell below to export an animation, you must \
have updated the tether simulation above and ran \
\[OpenCurlyDoubleQuote]Preview animation\[CloseCurlyDoubleQuote] first. Video \
files are exported as .",
 StyleBox["avi",
  IgnoreSpellCheck->True],
 " and are ~1mb per frame (Number of frames option above) So a large number \
of frames may take a long time to run or crash the program. Around 350 frames \
takes ~5 minutes to export on my machine. Files are exported to your default \
directory, which displays below as the output of Directory[]. If animations \
are too slow or fast adjust the framerate option in Export[]"
}], "Text",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.7398681841228905`*^9, 3.7398683522077456`*^9}, {
  3.7398690758405204`*^9, 3.7398691010924306`*^9}, {3.7398692303577175`*^9, 
  3.7398692447197084`*^9}, {3.739869798779562*^9, 
  3.73986979952184*^9}},ExpressionUUID->"4dc2a8b9-4474-45e1-b0c0-\
bd230559ef45"],

Cell[BoxData[
 RowBox[{"(*", "\[IndentingNewLine]", 
  RowBox[{"filename", " ", "=", " ", 
   RowBox[{"\"\<tethersim\>\"", "\[IndentingNewLine]", 
    RowBox[{"Export", "[", 
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{"{", 
        RowBox[{"filename", ",", "\"\<.avi\>\""}], "}"}], "]"}], ",", 
      "frames", ",", 
      RowBox[{"\"\<FrameRate\>\"", "\[Rule]", "4"}]}], "]"}], " ", 
    "\[IndentingNewLine]", 
    RowBox[{"Directory", "[", "]"}]}]}], "\[IndentingNewLine]", 
  "*)"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{
  3.7398681440476875`*^9, {3.7399465283243465`*^9, 3.7399465294231567`*^9}, {
   3.7401367038879795`*^9, 
   3.740136706982707*^9}},ExpressionUUID->"22775585-5bc5-4b59-b4f2-\
e7b67701cf93"]
}, Open  ]]
},
WindowSize->{1536, 781},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
SpellingDictionaries->{"CorrectWords"->{"avi"}},
Magnification:>0.9 Inherited,
FrontEndVersion->"11.2 for Microsoft Windows (64-bit) (September 10, 2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 426, 8, 60, "Section",ExpressionUUID->"addc754c-88b9-467f-b7f8-90b2907f126e",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[CellGroupData[{
Cell[1009, 32, 450, 10, 31, "Text",ExpressionUUID->"8495a2f7-c804-46b2-910a-0e07e5a205f8",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[1462, 44, 127501, 2659, 4906, "Input",ExpressionUUID->"65a15be3-4410-4b2b-a7d6-94cf747580b2",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Open  ]],
Cell[128978, 2706, 212210, 3772, 782, "Output",ExpressionUUID->"b5dfbf18-e6df-46f8-aae1-e6d118b4503f"],
Cell[CellGroupData[{
Cell[341213, 6482, 466, 7, 60, "Section",ExpressionUUID->"329001ec-d69b-4b78-bcd6-ff9a77689c19",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[341682, 6491, 1017, 18, 73, "Text",ExpressionUUID->"4dc2a8b9-4474-45e1-b0c0-bd230559ef45",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[342702, 6511, 782, 19, 99, "Input",ExpressionUUID->"22775585-5bc5-4b59-b4f2-e7b67701cf93",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]]
}
]
*)

